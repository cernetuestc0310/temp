
#line 3 "ClntLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 83
#define YY_END_OF_BUFFER 84
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[730] =
    {   0,
        1,    1,    0,    0,    0,    0,   84,   82,    2,    1,
        1,   82,   65,   82,   82,   81,   81,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   69,   69,   83,    1,
        1,    1,    0,   77,   65,    0,   77,   67,   66,   81,
        0,    0,   80,    0,   74,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,    6,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   41,   78,   78,
       78,   78,   78,   78,   78,   19,   20,    7,   78,   78,
       78,   78,   78,   78,   68,   66,   81,    0,    0,   73,

       79,   72,   72,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   81,
        0,    0,    0,   71,   71,    0,   72,    0,   72,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   28,    8,
       78,   78,   78,   78,   78,   78,    0,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   81,    0,    0,
        0,    0,   71,    0,   71,    0,   72,   72,   72,   72,

       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,    3,   78,   78,   78,   78,   78,   78,   78,    0,
       78,   78,   78,    9,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,    0,    0,    0,    0,   71,   71,   71,
       71,    0,   72,   72,   72,    0,   72,   78,   78,   78,
       78,   78,   78,   78,   23,   78,   78,   78,   78,   29,
       78,   78,   78,   78,   78,   78,   78,    0,    0,   78,
       78,   78,   78,   78,   21,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,

       78,    0,    0,    0,   71,   71,   71,    0,   71,    0,
        0,   72,   72,   72,   72,   78,    5,   78,   78,   78,
       78,   78,   45,   43,   78,   78,   78,   78,   78,   78,
       78,   78,   78,    0,    0,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   38,   78,   78,   78,    0,    0,    0,    0,
        0,   71,   71,   71,   71,    0,   72,   72,   72,    0,
       72,   78,   78,   78,   78,   78,   78,   78,   78,   44,
       78,   78,   78,   78,   34,   78,   12,   13,   78,    0,
        0,   78,   78,   78,   78,   78,   78,   78,   78,   78,

       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       14,    0,    0,    0,   71,   71,   71,    0,   71,   76,
       72,   72,   72,   72,   78,   78,   78,   78,   78,   78,
       78,   78,   42,   78,   78,   78,   11,   78,    0,    0,
       78,   78,    4,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   10,   78,   25,   78,   78,   78,    0,
        0,    0,   75,   71,   71,   71,   71,   72,   72,   72,
        0,   72,   78,   78,   78,   78,   78,   78,   78,   22,
       78,   78,   78,   78,    0,    0,   31,   30,   78,   24,
       78,   78,   78,   78,   78,   78,   27,   26,   78,   78,

       78,   78,   78,    0,    0,   71,   71,   71,    0,   71,
       72,   72,   72,   72,   61,   78,   78,   78,   78,   52,
       78,   78,   78,   48,   78,   33,   32,   78,   78,   78,
       78,   78,   78,   15,   78,   78,   64,   78,   46,    0,
        0,    0,   71,   71,   71,   71,   72,   72,   72,    0,
       72,   78,   78,   50,   78,   53,   60,   78,   78,   78,
       78,   78,   78,   37,   78,   63,   78,   78,    0,    0,
       71,   71,   71,    0,   71,   72,   72,   72,   72,   78,
       78,   78,   78,   49,   78,   78,   78,   78,   78,   35,
       78,   78,    0,    0,    0,   71,   71,   71,   71,   72,

       72,   72,    0,   72,   78,   78,   78,   78,   62,   16,
       78,   78,   78,   78,   18,    0,   70,   73,   71,   71,
       71,    0,   71,   72,   72,   72,   72,   78,   78,   54,
       78,   78,   36,   78,   78,    0,   70,    0,   71,   71,
       71,   71,   71,   72,   72,   72,    0,   72,   78,   78,
       55,   78,   78,   78,   78,   78,   78,   70,   73,   71,
        0,   71,   71,   71,   71,   72,   72,   72,   78,   78,
       78,   78,   78,   78,   17,   40,   78,   70,   71,   71,
       71,   71,   72,   72,   72,   78,   78,   56,   57,   58,
       59,   78,   71,   71,    0,   71,   71,   72,   78,   51,

       78,   71,   71,   72,   78,   78,   71,   71,    0,   47,
       39,   71,   71,   71,   71,    0,   71,   71,   71,   71,
        0,   71,   71,   71,   71,    0,   71,   71,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
        1,    1,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        1,    1,    1,    1,    1,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[75] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    3,    3,    3,    3,    3,    3,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[794] =
    {   0,
        0,    0, 1090, 1089,    0,    0, 1096, 3791, 3791,   72,
       74, 1090,    0, 1087,   71,   71,   34, 1071,  134,  183,
      184,  186,  218,  275,   77,   71,   58,   72,   66,  185,
       88,  279,  292,   74,   89,  176, 3791, 1080, 3791,  115,
      129,  213, 1086, 3791,    0, 1056, 1047, 3791,    0,  349,
     1031,  258, 3791,    0,  393,    0,  435,  188,    0,  186,
      182,  201,  192,  199,  211,  205,  256,  282,  291,  293,
      289,  290,  282,  281,  347,  294,  291,    0,  325,  316,
      323,  316,  358,  366,  441,    0,    0,    0,  369,  404,
      410,  434,  433,  430, 3791,    0,  495,  418, 1030,  539,

        0,  583,  513,  625,  431,  436,  443,  447, 1041,  452,
      450,  450,  442,  453,  455,  510,  511,  516, 1040,  512,
      253,  629,  555, 1039,  556,  567,  598,  603,  600, 1038,
      609,  616,  628,  634,  626,  638,  633,  639,  633,  680,
      564, 1025,  991,  726,  698,  707,  770,  812,  744,  854,
      746,  727, 1002,  741,  774,  785, 1000,  777,  999,    0,
      791,  792,  809,  815,  850,  856,  998,  868,  851,  866,
      862,  850,  855,  866,  869,  871,  860,  899,  997,  873,
      876,  996,  875,  906,  904,  894,  995,  928,  973,  955,
      939,  954,  965, 1007,  983, 1025, 1051, 1069, 1095, 1113,

      932,  894,  892,  899, 1112,  894,  910,  902, 1109,  908,
      970,    0,  998, 1039, 1068, 1110, 1101, 1117, 1105, 1116,
     1113, 1125, 1117,    0, 1107, 1128, 1120, 1118, 1113,  943,
     1118, 1128, 1134, 1145, 1148, 1140, 1133, 1139, 1154, 1148,
      942, 1150, 1165,  877,  837,  836, 1191, 1207, 1225, 1251,
     1269, 1234, 1295,  834, 1307, 1349, 1325, 1170, 1196, 1244,
     1268, 1316,  845, 1313,    0, 1318, 1321, 1324, 1347,    0,
     1339,  844, 1349, 1341, 1360, 1352, 1359, 1352, 1363, 1356,
     1352, 1365,  843, 1354,    0, 1368,  842, 1371,  841, 1363,
     1370, 1366, 1370, 1396,  839, 1387,  838, 1383, 1392,  837,

     1396,  824,  823, 1421, 1443,  792, 1455, 1497, 1473, 1515,
     1541, 1552, 1570, 1596, 1614, 1389,    0, 1458, 1494, 1515,
     1606, 1538,    0, 1558, 1599, 1611, 1612, 1605, 1614, 1616,
     1624, 1625,  803, 1618, 1614, 1632, 1612, 1626, 1617, 1615,
     1634, 1635, 1634, 1631,  802, 1650, 1630, 1639, 1635, 1648,
     1653, 1655,    0, 1660, 1651, 1653,  789,  788,  787, 1692,
     1709, 1720, 1738, 1764, 1782, 1747, 1808,  785, 1820, 1862,
     1838, 1672, 1709, 1767, 1782, 1830, 1829, 1833, 1841,    0,
     1857, 1859,  796, 1859,    0, 1863,    0,    0, 1860, 1876,
     1856, 1870, 1875, 1874, 1879, 1878,  795, 1879, 1872, 1881,

     1883, 1886, 1891, 1891, 1879, 1908, 1910, 1901, 1911, 1902,
        0,  782,  781, 1934, 1956,  780, 1968, 2010, 1986, 1995,
     2054, 2028, 2098, 2072, 1907,  791, 1994, 2006, 2061, 2065,
     2079, 2089,    0, 2088, 2096, 2106,    0, 2093, 2103, 2108,
     2100, 2097,    0, 2098, 2099, 2112, 2106, 2106, 2102, 2112,
     2108, 2105, 2123,    0, 2148,    0, 2148, 2148, 2149,  750,
      749,  748, 2168, 2192, 2210, 2236, 2254, 2280,  747, 2292,
     2334, 2310, 2137, 2165, 2198, 2251, 2312, 2311, 2308,    0,
     2317, 2319, 2340, 2341, 2333, 2330,    0,    0, 2340,    0,
     2341, 2346, 2347, 2344, 2332, 2337,    0,    0, 2338,  758,

     2352, 2338, 2356,  745,  744, 2397,  716, 2409, 2451, 2427,
     2495, 2469, 2539, 2513,    0, 2419,  725, 2447,  673,    0,
     2489, 2508, 2517,    0, 2542, 3791, 3791, 2533, 2544, 2533,
     2545, 2533, 2549,    0, 2542, 2542,    0, 2548,    0,  660,
      659,  650, 2595, 2613, 2639, 2657, 2683,  649, 2695, 2737,
     2713, 2553, 2590,    0, 2731,    0,    0, 2616, 2650, 2699,
     2715, 2699, 2736,    0, 2730,    0, 2734, 2738,  648,  647,
     2789,  646, 2801, 2843, 2763, 2887, 2819, 2931, 2861,  657,
     2748, 2821, 2835,    0, 2844, 2858, 2875, 2907, 2893,    0,
      618, 2935,  605,  604,  603, 2978, 2952, 3022, 2996, 3040,

      602, 3066, 3108, 3084, 2924, 2966,  605, 3003,    0,    0,
     3039, 3071, 3081, 3073,    0,  600,  598,    0, 3129,  597,
     3152, 3194, 3170, 3238, 3212, 3282, 3256, 3103, 3168,    0,
      369, 3181,    0, 3231, 3248,  596,  595,  594,  593, 3326,
     3301, 3370, 3344, 3388,  592, 3414,    0, 3432, 3291, 3329,
        0,  213,  554,  560, 3347, 3382, 3411,  551, 3791,  550,
        0, 3468,  549, 3480, 3498, 3524, 3542,    0, 3433, 3484,
      553,  522,  523,  524,    0,    0, 3486,  516,  515,  514,
     3568, 3586, 3612,  471,    0, 3537, 3531,    0,    0,    0,
        0, 3578,  470,  461,    0, 3625, 3791,    0, 3570,    0,

     3588,  460,  407, 3791, 3605, 3619,  406,  405,    0,    0,
        0,  404,  403,  402,  373,    0,  372,  371,  370,  369,
        0,  368,  366,  364,  331,    0,  329,  328, 3791, 3674,
     3678, 3682, 3686, 3690, 3694, 3696,  306, 3698, 3700, 3702,
     3704, 3706, 3708, 3710, 3712, 3714, 3716, 3718, 3720, 3722,
     3724, 3726, 3728, 3730, 3732, 3734, 3736, 3738, 3740, 3742,
     3744, 3746,  283, 3748, 3750,  282, 3752, 3754,  281,  278,
     3756, 3758,  264, 3760,  263,  262, 3762, 3764, 3766,  261,
     3768, 3770, 3772,  215, 3774, 3776, 3778,  143, 3780, 3782,
     3784,   79, 3786

    } ;

static yyconst flex_int16_t yy_def[794] =
    {   0,
      729,    1,  730,  730,  731,  731,  729,  729,  729,  729,
      729,  732,  733,  734,  729,  729,   16,  729,  729,   19,
       19,   19,   19,   19,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  729,  729,  729,  729,
      729,  729,  732,  729,  733,  734,  729,  729,  735,  729,
      736,   50,  729,  737,  729,   24,   24,   57,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  729,  735,  729,   97,  738,  729,

      737,  729,  102,   57,  104,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  729,
      140,  739,  740,  729,  144,  729,  729,  729,  147,  104,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  729,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  141,  141,  741,
      742,  729,  729,  729,  193,  729,  729,  197,  729,  199,

      150,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  729,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  729,  743,  744,  729,  729,  248,  729,
      250,  729,  729,  729,  729,  729,  255,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  729,  729,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,  745,  746,  729,  729,  729,  729,  729,  307,  729,
      729,  729,  312,  729,  314,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  729,  729,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  729,  747,  748,  729,
      729,  729,  362,  729,  364,  729,  729,  729,  729,  729,
      369,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  729,
      729,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  749,  750,  729,  729,  729,  729,  729,  417,  729,
      729,  421,  729,  423,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  729,  729,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  729,
      751,  752,  729,  729,  464,  729,  466,  729,  729,  729,
      729,  470,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  729,  729,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,  753,  754,  729,  729,  729,  729,  508,
      729,  511,  729,  513,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  729,  729,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  729,
      755,  756,  729,  543,  729,  545,  729,  729,  729,  729,
      549,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  757,  758,
      729,  729,  729,  729,  573,  729,  576,  729,  578,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,  729,  759,  760,  729,  596,  729,  598,  729,

      729,  729,  729,  602,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  761,  762,  763,  729,  729,
      729,  729,  621,  729,  624,  729,  626,   24,   24,   24,
       24,   24,   24,   24,   24,  729,  764,  729,  765,  729,
      640,  729,  642,  729,  729,  729,  766,  646,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  767,  729,  768,
      769,  729,  729,  729,  664,  729,  666,  770,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  729,  771,  772,
      729,  681,  729,  729,  773,   24,   24,   24,   24,   24,
       24,   24,  729,  774,  775,  729,  729,  776,   24,   24,

       24,  777,  778,  729,   24,   24,  729,  779,  780,   24,
       24,  781,  782,  729,  783,  784,  785,  786,  729,  787,
      788,  789,  790,  729,  791,  792,  793,  729,    0,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729

    } ;

static yyconst flex_int16_t yy_nxt[3866] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   20,   21,   22,   23,   24,   24,
       25,   24,   24,   26,   27,   28,   29,   30,   24,   31,
       32,   33,   34,   35,   36,   24,   24,   24,   19,   20,
       20,   21,   22,   23,   24,   24,   25,   24,   24,   26,
       27,   28,   29,   30,   24,   31,   32,   33,   34,   35,
       36,   24,   24,   24,   40,   41,   42,   41,   48,  729,
       73,  643,   49,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   51,   52,   52,   52,   52,   52,   52,   68,

       53,   71,   74,   77,   69,  729,   73,   72,   75,   91,
       80,   92,   70,   76,   81,   93,   54,   40,   41,   52,
       52,   52,   52,   52,   52,   68,   53,   71,   74,   77,
       69,   42,   41,   72,   75,   91,   80,   92,   70,   76,
       81,   93,   54,   56,   56,  723,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   51,   57,   57,   57,   58,
       57,   57,   56,   59,   56,   56,   56,   56,   56,   60,
       56,   56,   56,   56,   56,   56,   61,   56,   56,   56,
       56,   56,   57,   57,   57,   58,   57,   57,   56,   59,
       56,   56,   56,   56,   56,   60,   56,   56,   56,   56,

       56,   56,   61,   56,   56,   56,   56,   56,   57,   57,
       78,   57,   94,  105,   62,   40,   41,  718,   56,   63,
       64,   56,  106,  107,   79,   56,   65,  671,   56,  108,
      672,   66,  109,  110,   57,   57,   78,   57,   94,  105,
       62,  111,  112,   57,   56,   63,   64,   56,  106,  107,
       79,   56,   65,   56,   56,  108,   67,   66,  109,  110,
       56,  167,  168,  713,  704,  703,  698,  111,  112,   57,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   56,
      685,  113,   67,  680,  668,  639,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,  729,   56,   56,   56,

       56,   56,   56,   82,   56,   86,   87,  113,  101,   83,
       56,   84,  114,  115,   88,  116,  118,   56,  119,  120,
       85,  121,   89,   56,   56,   56,   56,   56,   56,   82,
       56,  124,  125,  117,   90,   83,   56,   84,  114,  115,
       88,  116,  118,   56,  119,  120,   85,  121,   89,  726,
      726,  126,  726,  127,  128,  129,  122,  124,  125,  117,
       90,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       51,   98,   98,   98,   98,   98,   98,  126,   53,  127,
      128,  129,  651,  652,  653,  721,  654,  726,  123,  721,
      721,  716,  721,  716,  716,  130,  131,   98,   98,   98,

       98,   98,   98,  134,   53,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  123,  103,  103,  103,  103,  103,
      103,  130,  131,  709,  716,  709,  709,  695,  709,  134,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  135,
      136,  103,  103,  103,  103,  103,  103,  104,  104,  104,
      104,  104,  104,  104,  104,  104,   51,  104,  104,  104,
      104,  104,  104,  132,   59,  135,  136,  137,  138,  139,
      151,  152,  153,  154,  156,  157,  158,  159,  160,  161,
      133,  695,  695,  104,  104,  104,  104,  104,  104,  132,
       59,  661,  647,  137,  138,  139,  151,  152,  153,  154,

      156,  157,  158,  159,  160,  161,  133,  140,  140,  140,
      140,  140,  140,  140,  140,  140,   51,  141,  141,  141,
      141,  141,  141,  729,   53,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  162,  695,  661,  638,  691,  690,
      689,  163,  164,  141,  141,  141,  141,  141,  141,  166,
       53,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      162,  145,  145,  145,  145,  145,  145,  163,  164,  688,
      622,  661,  638,  674,  673,  166,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  171,  173,  145,  145,  145,
      145,  145,  145,  146,  174,  147,  147,  147,  147,  147,

      147,  147,  147,  147,  148,  149,  149,  149,  149,  149,
      149,  171,  173,  603,  661,  659,  638,  595,  574,  638,
      174,  595,  630,  550,  618,  595,  542,  614,  175,  176,
      177,  149,  149,  149,  149,  149,  149,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  179,  150,  150,  150,
      150,  150,  150,  169,  175,  176,  177,  180,  181,  170,
      182,  183,  184,  185,  186,  187,  605,  509,  595,  542,
      471,  100,  179,  150,  150,  150,  150,  150,  150,  169,
      542,  462,  555,  180,  181,  170,  182,  183,  184,  185,
      186,  187,  188,  188,  188,  188,  188,  188,  188,  188,

      188,   51,  189,  189,  189,  189,  189,  189,  729,   53,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  189,  189,
      189,  189,  189,  189,  553,   53,  192,  418,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  194,  195,  195,
      195,  195,  195,  195,  729,  202,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  542,  462,  536,  370,  100,
      462,  359,  203,  204,  195,  195,  195,  195,  195,  195,
      146,  206,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  148,  198,  198,  198,  198,  198,  198,  203,  204,

      474,  308,  462,  359,  446,  435,  256,  206,  100,  359,
      246,  401,  389,  194,  207,  208,  210,  212,  198,  198,
      198,  198,  198,  198,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  213,  200,  200,  200,  200,  200,  200,
      207,  208,  210,  212,  359,  246,  355,  352,  350,  214,
      344,  342,  339,  328,  321,  148,  215,  100,  246,  213,
      200,  200,  200,  200,  200,  200,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  214,  201,  201,  201,  201,
      201,  201,  215,  216,  217,  218,  219,  223,  224,  225,
      226,  227,  228,  221,  230,  231,  229,  232,  143,  236,

      237,  239,  201,  201,  201,  201,  201,  201,  222,  216,
      217,  218,  219,  223,  224,  225,  226,  227,  228,  221,
      230,  231,  229,  232,  233,  236,  237,  239,  240,  241,
      242,  258,  259,  260,  222,  263,  264,  265,  269,  234,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  729,
      233,  299,  288,  729,  240,  241,  242,  258,  259,  260,
      246,  263,  264,  265,  269,  234,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  192,  143,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  194,  249,  249,  249,
      249,  249,  249,  729,  729,  249,  249,  249,  249,  249,

      249,  249,  249,  249,  243,  238,  235,  220,  211,  209,
      270,  205,  100,  249,  249,  249,  249,  249,  249,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  271,  251,
      251,  251,  251,  251,  251,  252,  270,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  143,  178,  172,  165,
      155,  143,  100,   46,  271,  251,  251,  251,  251,  251,
      251,  146,   47,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  148,  254,  254,  254,  254,  254,  254,  729,
      272,  254,  254,  254,  254,  254,  254,  254,  254,  254,
       44,   95,   55,   47,   44,  729,   38,   38,  273,  254,

      254,  254,  254,  254,  254,  146,  272,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  256,  257,  257,  257,
      257,  257,  257,  729,  273,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  261,  266,  274,  275,  262,  276,
      277,  278,  267,  257,  257,  257,  257,  257,  257,  280,
      268,  281,  282,  283,  284,  285,  279,  286,  287,  289,
      261,  266,  274,  275,  262,  276,  277,  278,  267,  290,
      291,  292,  293,  294,  295,  280,  268,  281,  282,  283,
      284,  285,  279,  286,  287,  289,  296,  297,  298,  300,
      301,  729,  316,  729,  729,  290,  291,  292,  293,  294,

      295,  304,  729,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  296,  297,  298,  300,  301,  192,  316,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  194,  306,
      306,  306,  306,  306,  306,  729,  317,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  306,  306,  306,  306,  306,
      306,  192,  317,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  308,  309,  309,  309,  309,  309,  309,  729,
      318,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      729,  729,  319,  729,  729,  729,  729,  729,  729,  309,

      309,  309,  309,  309,  309,  146,  318,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  148,  146,  319,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  256,  313,
      313,  313,  313,  313,  313,  729,  729,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  729,  729,  729,  729,
      729,  320,  322,  323,  324,  313,  313,  313,  313,  313,
      313,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      325,  315,  315,  315,  315,  315,  315,  320,  322,  323,
      324,  326,  327,  329,  330,  331,  332,  333,  334,  335,
      336,  337,  338,  340,  341,  343,  325,  315,  315,  315,

      315,  315,  315,  345,  346,  347,  348,  326,  327,  329,
      330,  331,  332,  333,  334,  335,  336,  337,  338,  340,
      341,  343,  349,  351,  353,  354,  356,  729,  372,  345,
      346,  347,  348,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  729,  729,  729,  729,  729,  729,  349,  351,
      353,  354,  356,  192,  372,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  194,  192,  729,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  308,  363,  363,  363,
      363,  363,  363,  729,  729,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  729,  729,  729,  729,  729,  729,

      373,  729,  729,  363,  363,  363,  363,  363,  363,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  374,  365,
      365,  365,  365,  365,  365,  366,  373,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  729,  375,  729,  729,
      729,  729,  729,  729,  374,  365,  365,  365,  365,  365,
      365,  146,  729,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  146,  375,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  256,  368,  368,  368,  368,  368,  368,
      729,  379,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  729,  729,  729,  729,  729,  729,  729,  729,  380,

      368,  368,  368,  368,  368,  368,  146,  379,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  370,  371,  371,
      371,  371,  371,  371,  729,  380,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  376,  381,  382,  383,  384,
      385,  377,  386,  378,  371,  371,  371,  371,  371,  371,
      387,  388,  390,  391,  392,  393,  394,  395,  396,  397,
      398,  376,  381,  382,  383,  384,  385,  377,  386,  378,
      399,  400,  402,  403,  404,  405,  387,  388,  390,  391,
      392,  393,  394,  395,  396,  397,  398,  406,  407,  408,
      409,  410,  411,  729,  425,  729,  399,  400,  402,  403,

      404,  405,  414,  729,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  406,  407,  408,  409,  410,  411,  192,
      425,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      192,  729,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  308,  416,  416,  416,  416,  416,  416,  729,  426,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  416,  416,
      416,  416,  416,  416,  192,  426,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  418,  419,  419,  419,  419,
      419,  419,  729,  427,  419,  419,  419,  419,  419,  419,

      419,  419,  419,  729,  729,  428,  729,  729,  729,  729,
      729,  729,  419,  419,  419,  419,  419,  419,  146,  427,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  256,
      146,  428,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  370,  422,  422,  422,  422,  422,  422,  729,  729,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  729,
      729,  729,  729,  729,  429,  430,  431,  432,  422,  422,
      422,  422,  422,  422,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  433,  424,  424,  424,  424,  424,  424,
      429,  430,  431,  432,  434,  436,  437,  438,  439,  440,

      441,  442,  443,  444,  445,  447,  448,  449,  450,  433,
      424,  424,  424,  424,  424,  424,  451,  452,  453,  454,
      434,  436,  437,  438,  439,  440,  441,  442,  443,  444,
      445,  447,  448,  449,  450,  455,  456,  457,  458,  459,
      729,  473,  451,  452,  453,  454,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  729,  729,  729,  729,  729,
      729,  455,  456,  457,  458,  459,  192,  473,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  308,  192,  729,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  418,
      465,  465,  465,  465,  465,  465,  729,  729,  465,  465,

      465,  465,  465,  465,  465,  465,  465,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  465,  465,  465,  465,
      465,  465,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  475,  467,  467,  467,  467,  467,  467,  729,  476,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  729,
      729,  729,  729,  729,  729,  729,  729,  475,  467,  467,
      467,  467,  467,  467,  146,  476,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  370,  469,  469,  469,  469,
      469,  469,  729,  477,  472,  472,  472,  472,  472,  472,
      472,  472,  472,  729,  729,  729,  729,  729,  729,  729,

      478,  479,  469,  469,  469,  469,  469,  469,  146,  477,
      470,  470,  470,  470,  470,  470,  470,  470,  470,  471,
      472,  472,  472,  472,  472,  472,  478,  479,  480,  481,
      482,  483,  484,  485,  486,  487,  488,  489,  490,  493,
      494,  495,  496,  497,  498,  491,  472,  472,  472,  472,
      472,  472,  492,  499,  480,  481,  482,  483,  484,  485,
      486,  487,  488,  489,  490,  493,  494,  495,  496,  497,
      498,  491,  500,  501,  502,  503,  729,  515,  492,  499,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  729,
      729,  729,  729,  729,  729,  516,  729,  729,  500,  501,

      502,  503,  192,  515,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  418,  507,  507,  507,  507,  507,  507,
      729,  516,  507,  507,  507,  507,  507,  507,  507,  507,
      507,  729,  729,  729,  729,  729,  729,  729,  729,  517,
      507,  507,  507,  507,  507,  507,  192,  729,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  509,  510,  510,
      510,  510,  510,  510,  729,  517,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  729,  729,  518,  729,  729,
      729,  729,  729,  729,  510,  510,  510,  510,  510,  510,
      146,  729,  311,  311,  311,  311,  311,  311,  311,  311,

      311,  370,  146,  518,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  471,  512,  512,  512,  512,  512,  512,
      729,  729,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  729,  729,  729,  729,  729,  519,  520,  521,  522,
      512,  512,  512,  512,  512,  512,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  523,  514,  514,  514,  514,
      514,  514,  519,  520,  521,  522,  524,  525,  526,  527,
      528,  529,  530,  531,  532,  533,  534,  535,  537,  538,
      539,  523,  514,  514,  514,  514,  514,  514,  729,  729,
      729,  729,  524,  525,  526,  527,  528,  529,  530,  531,

      532,  533,  534,  535,  537,  538,  539,  192,  729,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  418,  192,
      729,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      509,  544,  544,  544,  544,  544,  544,  729,  729,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  729,  729,
      729,  729,  729,  729,  552,  729,  729,  544,  544,  544,
      544,  544,  544,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  554,  546,  546,  546,  546,  546,  546,  729,
      552,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      729,  729,  729,  729,  729,  729,  729,  729,  554,  546,

      546,  546,  546,  546,  546,  146,  729,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  471,  548,  548,  548,
      548,  548,  548,  729,  556,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  729,  729,  729,  729,  729,  729,
      729,  557,  558,  548,  548,  548,  548,  548,  548,  146,
      556,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      550,  551,  551,  551,  551,  551,  551,  557,  558,  559,
      560,  561,  562,  563,  564,  565,  566,  567,  568,  729,
      580,  729,  729,  729,  729,  729,  729,  551,  551,  551,
      551,  551,  551,  729,  729,  559,  560,  561,  562,  563,

      564,  565,  566,  567,  568,  192,  580,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  509,  572,  572,  572,
      572,  572,  572,  729,  581,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  729,  729,  729,  729,  729,  729,
      729,  729,  584,  572,  572,  572,  572,  572,  572,  192,
      581,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      574,  575,  575,  575,  575,  575,  575,  729,  584,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  729,  729,
      585,  729,  729,  729,  729,  729,  729,  575,  575,  575,
      575,  575,  575,  146,  729,  311,  311,  311,  311,  311,

      311,  311,  311,  311,  471,  146,  585,  576,  576,  576,
      576,  576,  576,  576,  576,  576,  550,  577,  577,  577,
      577,  577,  577,  729,  729,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  729,  729,  729,  729,  729,  729,
      586,  587,  588,  577,  577,  577,  577,  577,  577,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  589,  579,
      579,  579,  579,  579,  579,  582,  586,  587,  588,  590,
      591,  583,  592,  729,  606,  597,  597,  597,  597,  597,
      597,  597,  597,  597,  589,  579,  579,  579,  579,  579,
      579,  582,  729,  729,  729,  590,  591,  583,  592,  192,

      606,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      509,  192,  729,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  574,  597,  597,  597,  597,  597,  597,  729,
      729,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      729,  729,  729,  729,  729,  729,  607,  729,  729,  597,
      597,  597,  597,  597,  597,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  608,  599,  599,  599,  599,  599,
      599,  729,  607,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  729,  729,  729,  729,  729,  729,  729,  609,
      608,  599,  599,  599,  599,  599,  599,  146,  610,  600,

      600,  600,  600,  600,  600,  600,  600,  600,  550,  601,
      601,  601,  601,  601,  601,  609,  611,  729,  729,  729,
      729,  729,  729,  729,  610,  729,  729,  729,  729,  729,
      729,  729,  729,  612,  613,  601,  601,  601,  601,  601,
      601,  146,  611,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  603,  604,  604,  604,  604,  604,  604,  612,
      613,  615,  729,  628,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  729,  729,  729,  729,  729,  729,  604,
      604,  604,  604,  604,  604,  729,  729,  615,  192,  628,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  574,

      620,  620,  620,  620,  620,  620,  729,  629,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  729,  729,  729,
      729,  729,  729,  729,  729,  631,  620,  620,  620,  620,
      620,  620,  192,  629,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  622,  623,  623,  623,  623,  623,  623,
      146,  631,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  550,  729,  729,  729,  729,  729,  729,  729,  632,
      623,  623,  623,  623,  623,  623,  146,  729,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  603,  625,  625,
      625,  625,  625,  625,  729,  632,  625,  625,  625,  625,

      625,  625,  625,  625,  625,  729,  729,  729,  729,  729,
      633,  634,  635,  729,  625,  625,  625,  625,  625,  625,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  649,
      627,  627,  627,  627,  627,  627,  633,  634,  635,  192,
      729,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      574,  729,  729,  729,  729,  649,  627,  627,  627,  627,
      627,  627,  192,  729,  640,  640,  640,  640,  640,  640,
      640,  640,  640,  622,  641,  641,  641,  641,  641,  641,
      729,  729,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  729,  729,  729,  729,  729,  729,  650,  729,  729,

      641,  641,  641,  641,  641,  641,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  655,  643,  643,  643,  643,
      643,  643,  729,  650,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  729,  729,  729,  729,  729,  729,  729,
      729,  655,  643,  643,  643,  643,  643,  643,  146,  729,
      644,  644,  644,  644,  644,  644,  644,  644,  644,  603,
      645,  645,  645,  645,  645,  645,  729,  656,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  729,  729,  729,
      729,  729,  729,  729,  657,  729,  645,  645,  645,  645,
      645,  645,  146,  656,  646,  646,  646,  646,  646,  646,

      646,  646,  646,  647,  648,  648,  648,  648,  648,  648,
      657,  729,  729,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  729,  729,  729,  729,  729,  729,  729,  669,
      648,  648,  648,  648,  648,  648,  192,  729,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  622,  663,  663,
      663,  663,  663,  663,  729,  669,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  670,  729,  729,  729,  729,
      729,  729,  729,  675,  663,  663,  663,  663,  663,  663,
      192,  729,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  670,  665,  665,  665,  665,  665,  665,  146,  675,

      311,  311,  311,  311,  311,  311,  311,  311,  311,  603,
      729,  729,  729,  729,  729,  729,  729,  676,  665,  665,
      665,  665,  665,  665,  146,  729,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  647,  667,  667,  667,  667,
      667,  667,  729,  676,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  677,  729,  729,  729,  729,  729,  729,
      729,  729,  667,  667,  667,  667,  667,  667,  729,  729,
      729,  729,  729,  729,  729,  686,  729,  729,  192,  677,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  622,
      192,  729,  681,  681,  681,  681,  681,  681,  681,  681,

      681,  686,  682,  682,  682,  682,  682,  682,  729,  687,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  729,
      729,  729,  729,  729,  729,  729,  729,  692,  682,  682,
      682,  682,  682,  682,  146,  687,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  647,  684,  684,  684,  684,
      684,  684,  729,  692,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  699,  729,  729,  729,  729,  729,  729,
      729,  700,  684,  684,  684,  684,  684,  684,  192,  729,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  699,
      697,  697,  697,  697,  697,  697,  729,  700,  697,  697,

      697,  697,  697,  697,  697,  697,  697,  729,  701,  729,
      705,  729,  729,  729,  729,  729,  697,  697,  697,  697,
      697,  697,  146,  706,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  647,  701,  192,  705,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  710,  711,  729,  706,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  710,  711,   37,   37,   37,   37,   39,   39,
       39,   39,   43,   43,   43,   43,   45,  729,   45,   45,
       46,   46,   46,   46,   96,  729,   96,   96,   99,   99,

      142,  142,  190,  190,  191,  191,  244,  244,  245,  245,
      302,  302,  303,  303,  357,  357,  358,  358,  412,  412,
      413,  413,  460,  460,  461,  461,  504,  504,  505,  505,
      540,  540,  541,  541,  569,  569,  570,  570,  593,  593,
      594,  594,  616,  616,  617,  617,  636,  636,  637,  637,
      658,  658,  660,  660,  678,  678,  679,  679,  693,  693,
      694,  694,  702,  702,  707,  707,  708,  708,  712,  712,
      714,  714,  715,  715,  717,  717,  719,  719,  720,  720,
      722,  722,  724,  724,  725,  725,  727,  727,  728,  728,
        7,  729,  729,  729,  729,  729,  729,  729,  729,  729,

      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729
    } ;

static yyconst flex_int16_t yy_chk[3866] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   10,   10,   11,   11,   15,   17,
       27,  792,   15,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   25,

       16,   26,   28,   29,   25,   17,   27,   26,   28,   34,
       31,   35,   25,   28,   31,   35,   16,   40,   40,   16,
       16,   16,   16,   16,   16,   25,   16,   26,   28,   29,
       25,   41,   41,   26,   28,   34,   31,   35,   25,   28,
       31,   35,   16,   19,   19,  788,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   20,   21,
       30,   22,   36,   58,   21,   42,   42,  784,   20,   21,
       21,   22,   60,   61,   30,   20,   21,  652,   22,   62,
      652,   22,   63,   64,   20,   21,   30,   22,   36,   58,
       21,   65,   66,   23,   20,   21,   21,   22,   60,   61,
       30,   20,   21,   23,   22,   62,   23,   22,   63,   64,
       23,  121,  121,  780,  776,  775,  773,   65,   66,   23,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   23,
      770,   67,   23,  769,  766,  763,   23,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   32,   24,   33,   33,   67,  737,   32,
       24,   32,   68,   69,   33,   70,   71,   24,   72,   73,
       32,   74,   33,   24,   24,   24,   24,   24,   24,   32,
       24,   76,   77,   70,   33,   32,   24,   32,   68,   69,
       33,   70,   71,   24,   72,   73,   32,   74,   33,  728,
      727,   79,  725,   80,   81,   82,   75,   76,   77,   70,
       33,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   79,   50,   80,
       81,   82,  631,  631,  631,  724,  631,  723,   75,  722,
      720,  719,  718,  717,  715,   83,   84,   50,   50,   50,

       50,   50,   50,   89,   50,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   75,   55,   55,   55,   55,   55,
       55,   83,   84,  714,  713,  712,  708,  707,  703,   89,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   90,
       91,   55,   55,   55,   55,   55,   55,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   85,   57,   90,   91,   92,   93,   94,
      105,  106,  107,  108,  110,  111,  112,  113,  114,  115,
       85,  702,  694,   57,   57,   57,   57,   57,   57,   85,
       57,  693,  684,   92,   93,   94,  105,  106,  107,  108,

      110,  111,  112,  113,  114,  115,   85,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,  103,   97,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  116,  680,  679,  678,  674,  673,
      672,  117,  118,   97,   97,   97,   97,   97,   97,  120,
       97,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      116,  100,  100,  100,  100,  100,  100,  117,  118,  671,
      663,  660,  658,  654,  653,  120,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  123,  125,  100,  100,  100,
      100,  100,  100,  102,  126,  102,  102,  102,  102,  102,

      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  123,  125,  645,  639,  638,  637,  636,  620,  617,
      126,  616,  607,  601,  595,  594,  593,  591,  127,  128,
      129,  102,  102,  102,  102,  102,  102,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  131,  104,  104,  104,
      104,  104,  104,  122,  127,  128,  129,  132,  133,  122,
      134,  135,  136,  137,  138,  139,  580,  572,  570,  569,
      548,  542,  131,  104,  104,  104,  104,  104,  104,  122,
      541,  540,  519,  132,  133,  122,  134,  135,  136,  137,
      138,  139,  140,  140,  140,  140,  140,  140,  140,  140,

      140,  140,  140,  140,  140,  140,  140,  140,  145,  140,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  140,  140,
      140,  140,  140,  140,  517,  140,  144,  507,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  149,  151,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  505,  504,  500,  469,  462,
      461,  460,  151,  152,  144,  144,  144,  144,  144,  144,
      147,  154,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  151,  152,

      426,  416,  413,  412,  397,  383,  368,  154,  359,  358,
      357,  345,  333,  306,  155,  156,  158,  161,  147,  147,
      147,  147,  147,  147,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  162,  148,  148,  148,  148,  148,  148,
      155,  156,  158,  161,  303,  302,  300,  297,  295,  163,
      289,  287,  283,  272,  263,  254,  164,  246,  245,  162,
      148,  148,  148,  148,  148,  148,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  163,  150,  150,  150,  150,
      150,  150,  164,  165,  165,  165,  166,  169,  170,  171,
      172,  173,  174,  168,  175,  176,  174,  177,  244,  180,

      181,  183,  150,  150,  150,  150,  150,  150,  168,  165,
      165,  165,  166,  169,  170,  171,  172,  173,  174,  168,
      175,  176,  174,  177,  178,  180,  181,  183,  184,  185,
      186,  202,  203,  204,  168,  206,  207,  208,  210,  178,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      178,  241,  230,  201,  184,  185,  186,  202,  203,  204,
      191,  206,  207,  208,  210,  178,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  193,  190,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  195,  189,  195,  195,  195,  195,  195,

      195,  195,  195,  195,  187,  182,  179,  167,  159,  157,
      211,  153,  143,  193,  193,  193,  193,  193,  193,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  213,  194,
      194,  194,  194,  194,  194,  196,  211,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  142,  130,  124,  119,
      109,   99,   51,   47,  213,  194,  194,  194,  194,  194,
      194,  197,   46,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  198,
      214,  198,  198,  198,  198,  198,  198,  198,  198,  198,
       43,   38,   18,   14,   12,    7,    4,    3,  215,  197,

      197,  197,  197,  197,  197,  199,  214,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  200,  215,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  205,  209,  216,  217,  205,  218,
      219,  220,  209,  199,  199,  199,  199,  199,  199,  221,
      209,  222,  223,  225,  226,  227,  220,  228,  229,  231,
      205,  209,  216,  217,  205,  218,  219,  220,  209,  232,
      233,  234,  235,  236,  237,  221,  209,  222,  223,  225,
      226,  227,  220,  228,  229,  231,  238,  239,  240,  242,
      243,    0,  258,    0,    0,  232,  233,  234,  235,  236,

      237,  247,    0,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  238,  239,  240,  242,  243,  248,  258,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  249,  259,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  248,  248,  248,  248,  248,
      248,  250,  259,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  251,
      260,  251,  251,  251,  251,  251,  251,  251,  251,  251,
        0,    0,  261,    0,    0,    0,    0,    0,    0,  250,

      250,  250,  250,  250,  250,  253,  260,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  255,  261,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  257,    0,  257,  257,  257,
      257,  257,  257,  257,  257,  257,    0,    0,    0,    0,
        0,  262,  264,  266,  267,  255,  255,  255,  255,  255,
      255,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      268,  256,  256,  256,  256,  256,  256,  262,  264,  266,
      267,  269,  271,  273,  274,  275,  276,  277,  278,  279,
      280,  281,  282,  284,  286,  288,  268,  256,  256,  256,

      256,  256,  256,  290,  291,  292,  293,  269,  271,  273,
      274,  275,  276,  277,  278,  279,  280,  281,  282,  284,
      286,  288,  294,  296,  298,  299,  301,    0,  316,  290,
      291,  292,  293,  304,  304,  304,  304,  304,  304,  304,
      304,  304,    0,    0,    0,    0,    0,    0,  294,  296,
      298,  299,  301,  305,  316,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  307,    0,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  309,    0,  309,  309,  309,  309,  309,
      309,  309,  309,  309,    0,    0,    0,    0,    0,    0,

      318,    0,    0,  307,  307,  307,  307,  307,  307,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  319,  308,
      308,  308,  308,  308,  308,  310,  318,  310,  310,  310,
      310,  310,  310,  310,  310,  310,    0,  320,    0,    0,
        0,    0,    0,    0,  319,  308,  308,  308,  308,  308,
      308,  311,    0,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  312,  320,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      313,  322,  313,  313,  313,  313,  313,  313,  313,  313,
      313,    0,    0,    0,    0,    0,    0,    0,    0,  324,

      312,  312,  312,  312,  312,  312,  314,  322,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  315,  324,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  321,  325,  326,  327,  328,
      329,  321,  330,  321,  314,  314,  314,  314,  314,  314,
      331,  332,  334,  335,  336,  337,  338,  339,  340,  341,
      342,  321,  325,  326,  327,  328,  329,  321,  330,  321,
      343,  344,  346,  347,  348,  349,  331,  332,  334,  335,
      336,  337,  338,  339,  340,  341,  342,  350,  351,  352,
      354,  355,  356,    0,  372,    0,  343,  344,  346,  347,

      348,  349,  360,    0,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  350,  351,  352,  354,  355,  356,  361,
      372,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      362,    0,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  363,  373,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  362,  362,
      362,  362,  362,  362,  364,  373,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  365,  374,  365,  365,  365,  365,  365,  365,

      365,  365,  365,    0,    0,  375,    0,    0,    0,    0,
        0,    0,  364,  364,  364,  364,  364,  364,  367,  374,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      369,  375,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  371,    0,
      371,  371,  371,  371,  371,  371,  371,  371,  371,    0,
        0,    0,    0,    0,  376,  377,  378,  379,  369,  369,
      369,  369,  369,  369,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  381,  370,  370,  370,  370,  370,  370,
      376,  377,  378,  379,  382,  384,  386,  389,  390,  391,

      392,  393,  394,  395,  396,  398,  399,  400,  401,  381,
      370,  370,  370,  370,  370,  370,  402,  403,  404,  405,
      382,  384,  386,  389,  390,  391,  392,  393,  394,  395,
      396,  398,  399,  400,  401,  406,  407,  408,  409,  410,
        0,  425,  402,  403,  404,  405,  414,  414,  414,  414,
      414,  414,  414,  414,  414,    0,    0,    0,    0,    0,
        0,  406,  407,  408,  409,  410,  415,  425,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  417,    0,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  419,    0,  419,  419,

      419,  419,  419,  419,  419,  419,  419,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  417,  417,  417,  417,
      417,  417,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  427,  418,  418,  418,  418,  418,  418,  422,  428,
      422,  422,  422,  422,  422,  422,  422,  422,  422,    0,
        0,    0,    0,    0,    0,    0,    0,  427,  418,  418,
      418,  418,  418,  418,  421,  428,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  424,  429,  424,  424,  424,  424,  424,  424,
      424,  424,  424,    0,    0,    0,    0,    0,    0,    0,

      430,  431,  421,  421,  421,  421,  421,  421,  423,  429,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  430,  431,  432,  434,
      435,  436,  438,  439,  440,  441,  442,  444,  445,  447,
      448,  449,  450,  451,  452,  446,  423,  423,  423,  423,
      423,  423,  446,  453,  432,  434,  435,  436,  438,  439,
      440,  441,  442,  444,  445,  447,  448,  449,  450,  451,
      452,  446,  455,  457,  458,  459,    0,  473,  446,  453,
      463,  463,  463,  463,  463,  463,  463,  463,  463,    0,
        0,    0,    0,    0,    0,  474,    0,    0,  455,  457,

      458,  459,  464,  473,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,
      465,  474,  465,  465,  465,  465,  465,  465,  465,  465,
      465,    0,    0,    0,    0,    0,    0,    0,    0,  475,
      464,  464,  464,  464,  464,  464,  466,    0,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  467,  475,  467,  467,  467,  467,
      467,  467,  467,  467,  467,    0,    0,  476,    0,    0,
        0,    0,    0,    0,  466,  466,  466,  466,  466,  466,
      468,    0,  468,  468,  468,  468,  468,  468,  468,  468,

      468,  468,  470,  476,  470,  470,  470,  470,  470,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  470,  470,
      472,    0,  472,  472,  472,  472,  472,  472,  472,  472,
      472,    0,    0,    0,    0,    0,  477,  478,  479,  481,
      470,  470,  470,  470,  470,  470,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  482,  471,  471,  471,  471,
      471,  471,  477,  478,  479,  481,  483,  484,  485,  486,
      489,  491,  492,  493,  494,  495,  496,  499,  501,  502,
      503,  482,  471,  471,  471,  471,  471,  471,    0,    0,
        0,    0,  483,  484,  485,  486,  489,  491,  492,  493,

      494,  495,  496,  499,  501,  502,  503,  506,    0,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  508,
        0,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  510,    0,  510,
      510,  510,  510,  510,  510,  510,  510,  510,    0,    0,
        0,    0,    0,    0,  516,    0,    0,  508,  508,  508,
      508,  508,  508,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  518,  509,  509,  509,  509,  509,  509,  512,
      516,  512,  512,  512,  512,  512,  512,  512,  512,  512,
        0,    0,    0,    0,    0,    0,    0,    0,  518,  509,

      509,  509,  509,  509,  509,  511,    0,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  514,  521,  514,  514,  514,  514,  514,
      514,  514,  514,  514,    0,    0,    0,    0,    0,    0,
        0,  522,  523,  511,  511,  511,  511,  511,  511,  513,
      521,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  522,  523,  525,
      528,  529,  530,  531,  532,  533,  535,  536,  538,    0,
      552,    0,    0,    0,    0,    0,    0,  513,  513,  513,
      513,  513,  513,    0,    0,  525,  528,  529,  530,  531,

      532,  533,  535,  536,  538,  543,  552,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  544,  553,  544,  544,  544,  544,  544,
      544,  544,  544,  544,    0,    0,    0,    0,    0,    0,
        0,    0,  558,  543,  543,  543,  543,  543,  543,  545,
      553,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  546,  558,  546,
      546,  546,  546,  546,  546,  546,  546,  546,    0,    0,
      559,    0,    0,    0,    0,    0,    0,  545,  545,  545,
      545,  545,  545,  547,    0,  547,  547,  547,  547,  547,

      547,  547,  547,  547,  547,  549,  559,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  551,    0,  551,  551,  551,  551,  551,
      551,  551,  551,  551,    0,    0,    0,    0,    0,    0,
      560,  561,  562,  549,  549,  549,  549,  549,  549,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  563,  550,
      550,  550,  550,  550,  550,  555,  560,  561,  562,  565,
      567,  555,  568,  575,  581,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  563,  550,  550,  550,  550,  550,
      550,  555,    0,    0,    0,  565,  567,  555,  568,  571,

      581,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  573,    0,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  577,
        0,  577,  577,  577,  577,  577,  577,  577,  577,  577,
        0,    0,    0,    0,    0,    0,  582,    0,    0,  573,
      573,  573,  573,  573,  573,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  583,  574,  574,  574,  574,  574,
      574,  579,  582,  579,  579,  579,  579,  579,  579,  579,
      579,  579,    0,    0,    0,    0,    0,    0,    0,  585,
      583,  574,  574,  574,  574,  574,  574,  576,  586,  576,

      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  585,  587,    0,    0,    0,
        0,    0,    0,    0,  586,    0,    0,    0,    0,    0,
        0,    0,    0,  588,  589,  576,  576,  576,  576,  576,
      576,  578,  587,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  588,
      589,  592,  597,  605,  597,  597,  597,  597,  597,  597,
      597,  597,  597,    0,    0,    0,    0,    0,    0,  578,
      578,  578,  578,  578,  578,    0,    0,  592,  596,  605,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,

      596,  596,  596,  596,  596,  596,  599,  606,  599,  599,
      599,  599,  599,  599,  599,  599,  599,    0,    0,    0,
        0,    0,    0,    0,    0,  608,  596,  596,  596,  596,
      596,  596,  598,  606,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  598,
      600,  608,  600,  600,  600,  600,  600,  600,  600,  600,
      600,  600,    0,    0,    0,    0,    0,    0,    0,  611,
      598,  598,  598,  598,  598,  598,  602,    0,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  602,  602,  604,  611,  604,  604,  604,  604,

      604,  604,  604,  604,  604,    0,    0,    0,    0,    0,
      612,  613,  614,    0,  602,  602,  602,  602,  602,  602,
      603,  603,  603,  603,  603,  603,  603,  603,  603,  628,
      603,  603,  603,  603,  603,  603,  612,  613,  614,  619,
        0,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,    0,    0,    0,    0,  628,  603,  603,  603,  603,
      603,  603,  621,    0,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      623,    0,  623,  623,  623,  623,  623,  623,  623,  623,
      623,    0,    0,    0,    0,    0,    0,  629,    0,    0,

      621,  621,  621,  621,  621,  621,  622,  622,  622,  622,
      622,  622,  622,  622,  622,  632,  622,  622,  622,  622,
      622,  622,  625,  629,  625,  625,  625,  625,  625,  625,
      625,  625,  625,    0,    0,    0,    0,    0,    0,    0,
        0,  632,  622,  622,  622,  622,  622,  622,  624,    0,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  627,  634,  627,  627,
      627,  627,  627,  627,  627,  627,  627,    0,    0,    0,
        0,    0,    0,    0,  635,    0,  624,  624,  624,  624,
      624,  624,  626,  634,  626,  626,  626,  626,  626,  626,

      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      635,  641,    0,  641,  641,  641,  641,  641,  641,  641,
      641,  641,    0,    0,    0,    0,    0,    0,    0,  649,
      626,  626,  626,  626,  626,  626,  640,    0,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  640,  640,
      640,  640,  640,  640,  643,  649,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  650,    0,    0,    0,    0,
        0,    0,    0,  655,  640,  640,  640,  640,  640,  640,
      642,    0,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  650,  642,  642,  642,  642,  642,  642,  644,  655,

      644,  644,  644,  644,  644,  644,  644,  644,  644,  644,
        0,    0,    0,    0,    0,    0,    0,  656,  642,  642,
      642,  642,  642,  642,  646,    0,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  648,  656,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  657,    0,    0,    0,    0,    0,    0,
        0,    0,  646,  646,  646,  646,  646,  646,    0,    0,
        0,    0,    0,    0,    0,  669,    0,    0,  662,  657,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      664,    0,  664,  664,  664,  664,  664,  664,  664,  664,

      664,  669,  664,  664,  664,  664,  664,  664,  665,  670,
      665,  665,  665,  665,  665,  665,  665,  665,  665,    0,
        0,    0,    0,    0,    0,    0,    0,  677,  664,  664,
      664,  664,  664,  664,  666,  670,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  667,  677,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  686,    0,    0,    0,    0,    0,    0,
        0,  687,  666,  666,  666,  666,  666,  666,  681,    0,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  686,
      681,  681,  681,  681,  681,  681,  682,  687,  682,  682,

      682,  682,  682,  682,  682,  682,  682,    0,  692,    0,
      699,    0,    0,    0,    0,    0,  681,  681,  681,  681,
      681,  681,  683,  701,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  692,  696,  699,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  705,  706,    0,  701,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  705,  706,  730,  730,  730,  730,  731,  731,
      731,  731,  732,  732,  732,  732,  733,    0,  733,  733,
      734,  734,  734,  734,  735,    0,  735,  735,  736,  736,

      738,  738,  739,  739,  740,  740,  741,  741,  742,  742,
      743,  743,  744,  744,  745,  745,  746,  746,  747,  747,
      748,  748,  749,  749,  750,  750,  751,  751,  752,  752,
      753,  753,  754,  754,  755,  755,  756,  756,  757,  757,
      758,  758,  759,  759,  760,  760,  761,  761,  762,  762,
      764,  764,  765,  765,  767,  767,  768,  768,  771,  771,
      772,  772,  774,  774,  777,  777,  778,  778,  779,  779,
      781,  781,  782,  782,  783,  783,  785,  785,  786,  786,
      787,  787,  789,  789,  790,  790,  791,  791,  793,  793,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,

      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[84] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
    0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "ClntParser.h"
#include "Portable.h"
#define YYABORT yyterminate();

  using namespace std;

namespace std {
  unsigned ComBeg; //line, in which comment begins
  unsigned LftCnt; //how many signs : on the left side of :: sign was interpreted
  unsigned RgtCnt; //the same as above, but on the right side of ::
  char Address[16]; //address, which is analizying right now
  char AddrPart[16];
  unsigned intpos,pos;
  yy_ClntParser_stype yylval;
}

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 730 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3791 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
{ return ClntParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
{ return ClntParser::NO_CONFIG_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
{ return ClntParser::ADDRES_;}
	YY_BREAK
case 6:
YY_RULE_SETUP
{ return ClntParser::IA_;}
	YY_BREAK
case 7:
YY_RULE_SETUP
{ return ClntParser::TA_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
{ return ClntParser::IAID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 10:
YY_RULE_SETUP
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
{ return ClntParser::LOGLEVEL_; }
	YY_BREAK
case 12:
YY_RULE_SETUP
{ return ClntParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
{ return ClntParser::LOGNAME_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
{ return ClntParser::WORKDIR_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
{ return ClntParser::SCRIPTS_DIR_; }
	YY_BREAK
case 16:
YY_RULE_SETUP
{ return ClntParser::NOTIFY_SCRIPTS_; }
	YY_BREAK
case 17:
YY_RULE_SETUP
{ return ClntParser::PREF_TIME_; }
	YY_BREAK
case 18:
YY_RULE_SETUP
{ return ClntParser::VALID_TIME_; }
	YY_BREAK
case 19:
YY_RULE_SETUP
{ return ClntParser::T1_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
{ return ClntParser::T2_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
{ return ClntParser::OPTION_; }
	YY_BREAK
case 22:
YY_RULE_SETUP
{ return ClntParser::DNS_SERVER_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
{ return ClntParser::DOMAIN_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
{ return ClntParser::NTP_SERVER_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
{ return ClntParser::TIME_ZONE_;}
	YY_BREAK
case 26:
YY_RULE_SETUP
{ return ClntParser::SIP_SERVER_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
{ return ClntParser::SIP_DOMAIN_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
{ return ClntParser::FQDN_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
{ return ClntParser::FQDN_S_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
{ return ClntParser::NIS_SERVER_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
{ return ClntParser::NIS_DOMAIN_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
{ return ClntParser::NISP_SERVER_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
{ return ClntParser::NISP_DOMAIN_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
{ return ClntParser::LIFETIME_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
{ return ClntParser::REJECT_SERVERS_;}
	YY_BREAK
case 36:
YY_RULE_SETUP
{ return ClntParser::PREFERRED_SERVERS_;}
	YY_BREAK
case 37:
YY_RULE_SETUP
{ return ClntParser::RAPID_COMMIT_;}
	YY_BREAK
case 38:
YY_RULE_SETUP
{ return ClntParser::UNICAST_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
{ return ClntParser::STRICT_RFC_NO_ROUTING_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
{ return ClntParser::PD_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
{ return ClntParser::PD_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_LL_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_LLT_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_EN_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
{ return ClntParser::VENDOR_SPEC_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
{ return ClntParser::ANON_INF_REQUEST_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
{ return ClntParser::INSIST_MODE_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
{ return ClntParser::INACTIVE_MODE_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
{ return ClntParser::AUTH_ENABLED_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
{ return ClntParser::AUTH_ACCEPT_METHODS_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
{ return ClntParser::DIGEST_NONE_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
{ return ClntParser::DIGEST_PLAIN_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
{ return ClntParser::EXPERIMENTAL_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
{ return ClntParser::ADDR_PARAMS_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
{ return ClntParser::MAPPING_PREFIX_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
{ return ClntParser::SKIP_CONFIRM_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
{ return ClntParser::TUNNEL_MODE_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
;
	YY_BREAK
case 66:
YY_RULE_SETUP
;
	YY_BREAK
case 67:
YY_RULE_SETUP
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 68:
YY_RULE_SETUP
BEGIN(INITIAL);
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
    { YYABORT; }
}
	YY_BREAK
    //IPv6 address - various forms

case 70:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 71:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 72:
YY_RULE_SETUP
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 73:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 74:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 75:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 76:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 78:
YY_RULE_SETUP
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return ClntParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return ClntParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 79:
YY_RULE_SETUP
{
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd than no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             { YYABORT; }
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return ClntParser::DUID_;
}
	YY_BREAK
case 80:
YY_RULE_SETUP
{ 
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",(unsigned int*)&(yylval.ival))) {
        Log(Crit) << "Hex number parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::HEXNUMBER_;
}
	YY_BREAK
case 81:
YY_RULE_SETUP
{ 
    if(!sscanf(yytext,"%u",(unsigned int*)&(yylval.ival))) { 
        Log(Crit) << "Integer parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::INTNUMBER_;
}
	YY_BREAK
case 82:
YY_RULE_SETUP
{return yytext[0];} 
	YY_BREAK
case 83:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 730 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 730 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 729);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

