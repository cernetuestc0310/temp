#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 104
#define YY_END_OF_BUFFER 105
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[855] =
    {   0,
        1,    1,    0,    0,    0,    0,  105,  103,    2,    1,
        1,  103,   86,  103,  103,  102,  102,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
       90,   90,  104,    1,    1,    1,    0,   98,   86,    0,
       98,   88,   87,  102,    0,    0,  101,    0,   95,   71,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   83,   99,   99,   73,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   16,

       17,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       89,   87,  102,    0,    0,   94,  100,   93,   93,   99,
       99,   99,   99,   72,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   82,  102,    0,
        0,    0,   92,   92,    0,   93,    0,   93,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   79,   99,   99,
       99,   29,   99,   99,   99,   40,   99,   99,   99,   99,

       99,   99,   99,    0,   99,   99,   99,   99,   99,   99,
       22,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   84,   99,   99,   99,   99,   99,  102,    0,
        0,    0,    0,   92,    0,   92,    0,   93,   93,   93,
       93,   99,   99,   99,   99,   78,   99,   99,    4,   99,
       99,   99,   99,   99,   99,   47,   85,   99,    3,   99,
       99,   99,   99,   99,   99,   99,    0,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,    7,   99,   23,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,    0,    0,    0,    0,   92,   92,   92,   92,    0,

       93,   93,   93,    0,   93,   99,   99,   99,   99,   99,
       99,   99,   99,   28,   99,   99,   99,   35,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,    0,    0,
       99,   99,   99,   33,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,    0,    0,    0,   92,   92,   92,    0,   92,
        0,    0,   93,   93,   93,   93,   99,   99,   31,   99,
       99,   99,   99,   99,    0,   99,   99,   81,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
        0,    0,   99,   99,   99,   99,   99,   51,   99,   99,

       99,   99,   99,   99,   99,   99,   99,   99,   99,   20,
       99,   99,   99,    0,    0,    0,    0,    0,   92,   92,
       92,   92,    0,   93,   93,   93,    0,   93,   99,   99,
       99,   99,   99,   99,   99,   99,   99,    0,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       46,   99,   12,   10,   70,    0,    0,   99,   99,   99,
       49,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,    5,   99,   99,   99,   99,   13,    0,    0,    0,
       92,   92,   92,    0,   92,   97,   93,   93,   93,   93,
       99,   99,   99,   99,   99,   99,   99,   99,   99,    0,

       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   11,    0,    0,   99,   99,   99,   50,   99,
       99,   99,   99,   30,   99,   99,    6,   80,   37,   99,
       99,   99,    0,    0,    0,   96,   92,   92,   92,   92,
       93,   93,   93,    0,   93,   99,   99,   99,   99,   99,
       99,   99,   48,   99,    0,   99,   99,   99,   99,   99,
       99,   34,   99,   32,   99,   99,   99,    0,    0,   43,
       42,   36,   99,   21,   99,   99,   39,   38,   99,   99,
       99,    0,    0,   92,   92,   92,    0,   92,   93,   93,
       93,   93,   99,   14,   99,   53,   99,   99,   58,   99,

        0,   99,   99,   99,   99,   61,   99,   99,   99,   99,
       99,   45,   44,   99,   99,   99,   55,   99,   52,    0,
        0,    0,   92,   92,   92,   92,   93,   93,   93,    0,
       93,   99,   99,   60,   99,   99,    0,   69,   99,   99,
       99,   62,   54,   99,   99,    8,   99,   24,   99,   99,
        0,    0,   92,   92,   92,    0,   92,   93,   93,   93,
       93,   99,   99,   59,   99,    0,   99,   99,   99,   99,
       99,   56,   99,   99,   99,   99,    0,    0,    0,   92,
       92,   92,   92,   93,   93,   93,    0,   93,   99,   99,
       99,    0,   99,   99,   99,   99,   99,   99,   99,   15,

       19,    0,   91,   94,   92,   92,   92,    0,   92,   93,
       93,   93,   93,   99,   99,   26,    0,    0,   99,   99,
       99,   63,   99,   25,   99,   99,    0,   91,    0,   92,
       92,   92,   92,   92,   93,   93,   93,    0,   93,   99,
       99,    0,    0,   27,   99,   99,   64,   99,   99,   99,
       99,   99,   91,   94,   92,    0,   92,   92,   92,   92,
       93,   93,   93,   57,   99,    0,    0,   99,   99,   99,
       99,   99,   99,   99,   18,   91,   92,   92,   92,   92,
       93,   93,   93,   99,    0,    0,   99,   99,   65,   66,
       67,   68,    9,   92,   92,    0,   92,   92,   93,   41,

        0,    0,   99,   99,   92,   92,   93,    0,    0,    0,
       99,   99,   99,   92,   92,    0,    0,    0,    0,   74,
       99,   99,   99,   74,   92,   92,    0,   76,    0,   99,
       76,   99,   92,   92,    0,    0,   75,   99,   75,   92,
       92,   77,   77,   92,   92,    0,   92,   92,   92,   92,
        0,   92,   92,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
       23,    1,    1,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
        1,    1,    1,    1,    1,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[76] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    1,    3,    3,    3,    3,    3,    3,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        3,    3,    3,    3,    3,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[924] =
    {   0,
        0,    0,  882,  846,    0,    0,  853, 5289, 5289,   73,
       75,  844,    0,  835,   72,   72,   34,  746,  744,  136,
      186,  233,  280,   71,  208,  338,   38,   73,  197,   89,
      263,  175,  235,  350,  279,  382,   67,  357,  180,  265,
     5289,  754, 5289,  111,  137,  222,  760, 5289,    0,  757,
      756, 5289,    0,  440,  739,  459, 5289,    0,  485, 5289,
       61,  528,   86,   89,  183,  193,  359,  221,  226,  381,
      276,  229,  270,  373,  374,  377,  521,  281,  480,  317,
      527,  544,  393,  452,  515,  525,  328,  380,  529,  372,
      552,  562,  573,  563,  575,  579,  565,  581,  595,  445,

      568,  606,  604,  571,  610,  612,  617,  616,  614,  615,
     5289,    0,  675,  694,  721,  720,    0,  765,  739,  808,
      614,  631,  800,  661,  799,  685,  797,  803,  802,  804,
      822,  707,  831,  824,  851,  839,  840,  725,  843,  860,
      863,  870,  872,  878,  873,  887,  883,  888,  910,  894,
      906,  907,  874,  923,  922,  915,  893,  925,  928,  953,
      946,  955,  944,  958,  957,  960,  974,  770, 1032,  783,
      702,  701, 1079, 1022,  792, 1124, 1167, 1051, 1210,  913,
     1145, 1170, 1011, 1204, 1199, 1084, 1209,  947, 1202, 1203,
     1044,  959, 1208, 1232, 1240,  962, 1213, 1249, 1128, 1244,

     1243, 1254, 1261,  712, 1253, 1257, 1282, 1293, 1294, 1291,
     1047, 1305, 1303, 1306, 1292, 1298, 1316, 1330, 1325, 1334,
     1336, 1341, 1066, 1337, 1358, 1357, 1349, 1378, 1143,  699,
      698,  697, 1187, 1438, 1481, 1418, 1457, 1526, 1500, 1571,
     1545,  696, 1346, 1355, 1559, 1264, 1570, 1399, 1513, 1460,
     1575, 1565, 1566, 1377, 1584, 1348, 1380, 1602, 1603, 1605,
     1609, 1607, 1613, 1606, 1624, 1608, 1616, 1617, 1638, 1652,
     1649, 1647, 1651, 1660, 1658, 1646, 1657, 1417, 1661, 1442,
     1665, 1679, 1676, 1669, 1694, 1696, 1697, 1706, 1724, 1710,
     1716,  655,  653,  649, 1782, 1793, 1812, 1838, 1857, 1554,

     1883,  647, 1895, 1938, 1914, 1746, 1735, 1713, 1719, 1837,
     1916, 1927, 1932, 2002, 1935, 1929, 1721, 1615, 1977, 1979,
     1982, 1930, 1972, 1983, 1984, 1990, 1994, 1988, 1714, 1733,
     2004, 1992, 2024, 1780, 1993, 2027, 2032, 2041, 2044, 2040,
     2062, 2037, 2034, 2054, 2045, 2048, 2075, 2076, 2078, 2065,
     2107, 2096,  645,  642, 1821, 2142,  641, 2167, 2210, 2154,
     2186, 2229, 2255, 2274, 2300, 2319, 2321, 2300, 1817, 2298,
     2314, 2189, 2313, 2336, 1916, 2351, 2303, 2035, 2361, 2318,
     2350, 2337, 2366, 2365, 2371, 2383, 2384, 2386, 2389, 2400,
     2076, 2082, 2401, 2402, 2404, 2390, 2418, 2106, 2439, 2425,

     2438, 2433, 2454, 2423, 2437, 2462, 2442, 2474, 2242, 2146,
     2469, 2472, 2456,  640,  602,  599, 2532, 2543, 2554, 2573,
     2599, 2618, 2582, 2644,  596, 2656, 2699, 2675, 2677, 2685,
     2693, 2598, 2688, 2713, 2702, 2690, 2691, 2187, 2701, 2742,
     2740, 2733, 2732, 2738, 2746, 2741, 2753, 2744, 2765, 2761,
     2253, 2763, 2332, 2452, 2471, 2505, 2540, 2769, 2790, 2792,
     2586, 2788, 2777, 2796, 2793, 2806, 2798, 2794, 2815, 2786,
     2827, 2805, 2833, 2834, 2836, 2835, 2826,  554,  553, 2894,
     2905,  552, 2917, 2960, 2936, 2945, 3005, 2979, 3050, 3024,
     2958, 3038, 3046, 2947, 3048, 3041, 3043, 3068, 3044, 2836,

     3071, 3047, 3082, 3099, 3087, 3103, 3084, 3086, 3104, 3123,
     3098, 3126, 2992, 3103, 3109, 3102, 3118, 3134, 3096, 3136,
     3148, 3143, 3145, 3120, 3147, 3142, 3137, 3138, 3150, 3172,
     3167, 3170,  548,  539,  512, 3213, 3232, 3251, 3277, 3296,
     3322,  510, 3334, 3377, 3353, 3339, 3364, 3373, 3369, 3371,
     3276, 3389, 3211, 3379, 3236, 3376, 3409, 3408, 3419, 3420,
     3418, 3230, 3423, 3356, 3416, 3428, 3424, 3417, 3414, 3413,
     3414, 3421, 3443, 3425, 3453, 3468, 3455, 3456, 3474, 3460,
     3480,  509,  508, 3538,  507, 3550, 3593, 3569, 3638, 3612,
     3683, 3657, 3477, 3463, 3470, 3465, 3473, 3580, 3471, 3678,

     3478, 3671, 3679, 3680, 3529, 3475, 3682, 3681, 3699, 3702,
     3703, 5289, 5289, 3730, 3714, 3717, 3476, 3731, 3571,  506,
      505,  504, 3791, 3777, 3836, 3810, 3855,  503, 3881, 3924,
     3900, 3914, 3911, 3591, 3902, 3923, 3628, 3716, 3938, 3918,
     3927, 3733, 3770, 3946, 3958, 3789, 3959, 3778, 3955, 3965,
      501,  499, 4023,  498, 4035, 4078, 4054, 4123, 4097, 4168,
     4142, 3823, 3963, 3834, 3962,  509, 4076, 3950, 4164, 4167,
     4157, 3921, 4162, 4159, 4163, 3977,  496,  495,  494, 4227,
     4246, 4272, 4291, 4317,  466, 4329, 4372, 4348, 4350, 4160,
     4367, 4376, 4361, 4388, 4065, 4271, 4389, 4169, 4402, 4014,

     4057,  465,  464,    0, 4460,  463, 4472, 4515, 4434, 4560,
     4491, 4605, 4534, 4368, 4528, 4110, 4174, 4211, 4600, 4601,
     4371, 4214, 4451, 4259, 4493, 4573,  462,  461,  459,  448,
     4661, 4586, 4706, 4680, 4725,  424, 4751,    0, 4770, 4593,
     4598, 4389, 4388, 4494, 4704, 4754, 4595, 4777, 4640, 4659,
     4765, 4766,  416, 5289,  412,    0, 4812,  411, 4837, 4856,
     4882, 4901,    0, 4596, 4769, 4650, 4711, 4770, 4816, 4861,
     4894, 4906, 4909, 4774, 4767,  408,  406,  362, 4969, 4928,
     4941,  361,    0, 4929, 4775,    0, 4933, 5003, 4815, 4881,
     4921, 4930, 4958,  358,  357,    0, 5016, 5289,    0, 4969,

        0, 4989, 5043, 5026,  355,  353, 5289, 5029, 4990, 5001,
     5031, 5017, 5025,  348,  346,    0, 5022, 5023, 5020, 5289,
     5047, 5037, 5033, 5024,  325,  309, 5030, 5289, 5054, 5049,
     5046, 5081,  307,  306,    0, 5074, 5289, 5082, 5064,  303,
      276, 5289, 5065,  267,  265,    0,  262,  260,  259,  258,
        0,  253,  229, 5289, 5152, 5156, 5160, 5164, 5168, 5172,
     5174,  233, 5176, 5178, 5180, 5182, 5184, 5186, 5188, 5192,
     5194, 5196, 5198, 5200, 5202, 5204, 5206, 5208, 5210, 5212,
     5214, 5216, 5218, 5220, 5222, 5224, 5226, 5228,  231, 5230,
     5232,  230, 5234, 5236,  228,  219, 5238, 5240,  217, 5244,

     5248, 5250,  214,  212, 5254, 5258, 5260, 5262, 5264,  145,
     5266, 5268, 5270,  131, 5272, 5274, 5276,  117, 5278, 5280,
     5282,   80, 5284
    } ;

static yyconst flex_int16_t yy_def[924] =
    {   0,
      854,    1,  855,  855,  856,  856,  854,  854,  854,  854,
      854,  857,  858,  859,  854,  854,   16,  854,  854,  854,
       20,   20,   22,   22,   22,   22,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      854,  854,  854,  854,  854,  854,  857,  854,  858,  859,
      854,  854,  860,  854,  861,   54,  854,  862,  854,  854,
       26,   22,   62,   62,   26,   26,   26,   26,   62,   26,
       26,   62,   26,   26,   26,   26,   26,   62,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      854,  860,  854,  113,  863,  854,  862,  854,  118,   62,
      120,  120,   26,   26,   26,  120,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,  854,  169,
      864,  865,  854,  173,  854,  854,  854,  176,  120,  179,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,  854,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,  170,  170,
      866,  867,  854,  854,  854,  234,  854,  854,  238,  854,
      240,  179,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,  854,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  854,  868,  869,  854,  854,  296,  854,  298,  854,

      854,  854,  854,  854,  303,   26,   26,   26,   26,   26,
       26,   26,   26,  870,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,  854,  854,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,  871,  872,  854,  854,  854,  854,  854,  358,
      854,  854,  854,  363,  854,  365,   26,   26,   26,   26,
       26,   26,   26,   26,  854,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      854,  854,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,  854,  873,  874,  854,  854,  854,  419,
      854,  421,  854,  854,  854,  854,  854,  426,   26,   26,
       26,   26,   26,   26,   26,   26,   26,  854,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,  854,  854,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,  875,  876,  854,
      854,  854,  854,  854,  483,  854,  854,  487,  854,  489,
       26,   26,   26,   26,   26,   26,   26,   26,   26,  854,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,  854,  854,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,  854,  877,  878,  854,  854,  537,  854,  539,
      854,  854,  854,  854,  543,   26,   26,   26,   26,   26,
       26,   26,   26,   26,  854,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,  854,  854,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  879,  880,  854,  854,  854,  854,  586,  854,  589,
      854,  591,   26,   26,   26,   26,   26,   26,   26,   26,

      854,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  854,  854,   26,   26,   26,   26,   26,   26,  854,
      881,  882,  854,  623,  854,  625,  854,  854,  854,  854,
      629,   26,   26,   26,   26,   26,  854,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      883,  884,  854,  854,  854,  854,  655,  854,  658,  854,
      660,   26,   26,   26,   26,  854,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,  854,  885,  886,  854,
      680,  854,  682,  854,  854,  854,  854,  686,   26,   26,
       26,  854,   26,   26,   26,   26,   26,   26,   26,   26,

       26,  887,  888,  889,  854,  854,  854,  854,  707,  854,
      710,  854,  712,   26,   26,   26,  854,  854,   26,   26,
       26,   26,   26,   26,   26,   26,  854,  890,  854,  891,
      854,  731,  854,  733,  854,  854,  854,  892,  737,   26,
       26,  854,  854,   26,   26,   26,   26,   26,   26,   26,
       26,   26,  893,  854,  894,  895,  854,  854,  854,  759,
      854,  761,  896,   26,   26,  854,  854,   26,   26,   26,
       26,   26,   26,   26,   26,  854,  897,  898,  854,  779,
      854,  854,  899,   26,  854,  900,   26,  901,   26,   26,
       26,   26,   26,  854,  902,  903,  854,  854,  904,   26,

      905,  854,  906,   26,  907,  908,  854,  854,  854,  854,
       26,   26,   26,  854,  909,  910,  854,  854,  854,  854,
       26,   26,   26,   26,  911,  912,  854,  854,  854,   26,
       26,   26,  854,  913,  914,  854,  854,   26,   26,  915,
      916,  854,   26,  854,  917,  918,  919,  920,  854,  921,
      922,  923,  854,    0,  854,  854,  854,  854,  854,  854,
      854,  854,  854,  854,  854,  854,  854,  854,  854,  854,
      854,  854,  854,  854,  854,  854,  854,  854,  854,  854,
      854,  854,  854,  854,  854,  854,  854,  854,  854,  854,
      854,  854,  854,  854,  854,  854,  854,  854,  854,  854,

      854,  854,  854,  854,  854,  854,  854,  854,  854,  854,
      854,  854,  854,  854,  854,  854,  854,  854,  854,  854,
      854,  854,  854
    } ;

static yyconst flex_int16_t yy_nxt[5365] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   27,   27,   29,   30,   31,   32,   33,   27,
       34,   35,   36,   37,   38,   39,   27,   40,   27,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   27,   27,
       29,   30,   31,   32,   33,   27,   34,   35,   36,   37,
       38,   39,   27,   40,   27,   44,   45,   46,   45,   52,
      854,   61,  734,   53,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   55,   62,   56,   56,   56,   56,   56,

       56,   81,   57,  106,   61,   61,  854,   61,   61,   82,
       61,  121,   85,   44,   45,  122,   61,   77,   58,  848,
       62,   56,   56,   56,   56,   56,   56,   81,   57,  106,
       61,   61,   61,  841,   61,   82,   61,  121,   85,   46,
       45,  122,   61,   77,   58,   61,   61,  826,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   55,   61,   62,
       62,   63,   64,   62,   62,   61,   65,   61,   61,   61,
       66,   61,   67,   61,   61,   61,   61,   61,   61,   68,
       61,   61,   61,   61,   61,   62,   62,   63,   64,   62,
       62,   61,   65,   61,   61,   61,   66,   61,   67,   61,

       61,   61,   61,   61,   61,   68,   61,   61,   61,   61,
       61,   62,   62,   89,  807,   90,  806,  109,   61,  799,
       61,  783,   61,   61,   44,   45,   61,  123,   83,   61,
      778,   78,  763,  730,   84,  117,   61,   62,   62,   89,
       61,   90,   61,  109,   61,   61,   61,   79,   61,   61,
      851,  126,   61,  123,   83,   61,   69,   78,   62,   62,
       84,   91,   61,  125,   61,  130,   61,   70,   61,   61,
       71,   61,   92,   79,  851,   93,   61,  126,   61,  851,
      846,  851,   69,  846,   62,   62,  846,   91,  835,  125,
       61,  130,  110,   70,   86,   61,   71,  846,   92,  131,

       87,   93,   61,   62,   61,   88,   61,   72,   61,   96,
       97,   73,  129,   61,   61,  137,   74,   75,  110,   61,
       86,   98,   99,   76,  835,  131,   87,  835,  816,   62,
      835,   88,   61,   72,   61,   96,   97,   73,  129,   61,
       61,  137,   74,   75,  139,   61,  816,   98,   99,   76,
       61,   61,   61,   61,   61,   61,   61,   61,   61,  854,
       61,   61,   61,   61,   61,   61,   61,  816,   61,  796,
      139,   61,   61,   94,  816,   61,  796,   95,  796,  756,
      107,   80,  738,  796,  108,  124,   61,   61,   61,   61,
       61,   61,   61,   61,   61,  100,  101,   61,   61,   94,

       61,   61,   61,   95,  127,  102,  107,   80,  134,  133,
      108,  124,  128,  103,  132,   61,   61,   61,  147,   61,
       61,  143,  104,   61,   61,  105,   61,  756,   61,  729,
      127,  102,  708,  756,  134,  133,   61,  729,  128,  103,
      132,   61,   61,   61,  147,  687,   61,  143,  104,   61,
       61,  105,  113,  113,  113,  113,  113,  113,  113,  113,
      113,   55,   61,  114,  114,  114,  114,  114,  114,  756,
       57,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      754,  144,  729,  679,  656,  729,  679,  630,   61,  114,
      114,  114,  114,  114,  114,   61,   57,  118,  118,  118,

      118,  118,  118,  118,  118,  118,  138,  144,  119,  119,
      119,  119,  119,  119,   61,  704,  679,  622,  692,  587,
      679,   61,  622,   61,  544,  116,  622,  535,  484,  622,
      535,  427,  138,  116,  119,  119,  119,  119,  119,  119,
      120,  120,  120,  120,  120,  120,  120,  120,  120,   61,
      140,  120,  120,  120,  120,  120,  120,  145,   61,  135,
      535,  149,   61,  136,   61,   61,  146,  141,   61,  416,
       61,  148,   61,  359,  535,  416,  140,  120,  120,  120,
      120,  120,  120,  145,   61,  135,  142,   61,   61,  136,
       61,   61,  146,  141,   61,   61,   61,  148,   61,  150,

      151,  152,  156,  157,  158,   61,   61,  153,   61,  154,
      155,   61,  142,   61,  162,  160,   61,  304,   61,  159,
      116,   61,   61,  416,   61,  150,  151,  152,  156,  157,
      158,   61,   61,  153,   61,  154,  155,   61,   61,  161,
      162,  180,   61,  164,   61,  159,  163,   61,   61,   61,
       61,  165,  166,   61,  167,   61,  168,   61,   61,   61,
       61,  294,  235,  416,   61,  161,  294,  180,  177,  164,
      116,  181,  163,   61,  294,   61,  172,  165,  166,   61,
      167,   61,  168,   61,   61,   61,   61,  169,  169,  169,
      169,  169,  169,  169,  169,  169,   55,  181,  170,  170,

      170,  170,  170,  170,   61,   57,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  184,  190,  854,  294,  172,
      854,  267,  116,  172,  170,  170,  170,  170,  170,  170,
       61,   57,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  184,  172,  174,  174,  174,  174,  174,  174,  854,
       61,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      116,  196,   50,   51,   48,  111,   60,   59,   61,  174,
      174,  174,  174,  174,  174,  175,   61,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  177,  196,  178,  178,
      178,  178,  178,  178,   61,  230,  230,  230,  230,  230,

      230,  230,  230,  230,  237,  237,  237,  237,  237,  237,
      237,  237,  237,   61,  178,  178,  178,  178,  178,  178,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  183,
      186,  179,  179,  179,  179,  179,  179,  182,  185,   61,
       61,   51,   61,   61,  187,   61,   61,   61,   48,  189,
      192,  188,  854,   42,  191,  183,  186,  179,  179,  179,
      179,  179,  179,  182,  185,   61,   61,   61,   61,   61,
      187,   61,   61,   61,   61,  189,  192,  188,  193,  194,
      191,  195,   61,   61,  197,  198,   61,  202,  199,   42,
      854,   61,  206,   61,   61,  204,  205,  200,  203,  201,

       61,  214,  218,   61,  193,  194,   61,  195,   61,   61,
      197,  198,   61,   61,  199,   61,   61,   61,  854,  207,
       61,   61,  854,  200,  203,  201,   61,  214,  211,   61,
       61,   61,   61,  854,  212,  208,   61,   61,  213,   61,
      854,   61,   61,   61,  209,  207,  215,   61,  210,   61,
       61,  243,   61,   61,  211,  217,   61,   61,   61,  216,
      212,  208,   61,   61,  213,   61,   61,  219,   61,  220,
      209,   61,  215,  222,  210,   61,   61,  243,  221,   61,
      224,  217,  223,  225,   61,  216,  227,   61,  226,   61,
       61,   61,   61,  219,   61,  220,   61,   61,   61,  222,

       61,   61,   61,   61,  221,   61,  224,  228,  223,  225,
      854,  854,  227,   61,  226,   61,   61,   61,  854,  854,
      247,  854,   61,  854,   61,  854,   61,   61,   61,   61,
      854,   61,  854,  228,  236,  236,  236,  236,  236,  236,
      236,  236,  236,   61,  229,  229,  229,  229,  229,  229,
      229,  229,  229,   55,   61,  230,  230,  230,  230,  230,
      230,  854,   57,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  854,  854,  854,  254,  854,  854,  854,  854,
       61,  230,  230,  230,  230,  230,  230,   61,   57,  233,
       61,  234,  234,  234,  234,  234,  234,  234,  234,  234,

      235,  254,  236,  236,  236,  236,  236,  236,  854,   61,
      854,  854,  854,   61,  854,  854,   61,  854,  854,  854,
      250,  854,  854,  854,  854,  854,  854,   61,  236,  236,
      236,  236,  236,  236,  175,   61,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  177,  250,  239,  239,  239,
      239,  239,  239,   61,  244,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  854,  854,  854,  854,  854,  854,
      260,   61,  245,  239,  239,  239,  239,  239,  239,  240,
      240,  240,  240,  240,  240,  240,  240,  240,   61,  854,
      241,  241,  241,  241,  241,  241,  260,   61,  245,  295,

      295,  295,  295,  295,  295,  295,  295,  295,  854,  854,
      854,  854,  854,   61,   61,  246,  241,  241,  241,  241,
      241,  241,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  248,  251,  242,  242,  242,  242,  242,  242,   61,
      249,  246,   61,  252,  253,   61,   61,   61,  255,  854,
      854,   61,   61,  854,  258,  256,   61,  248,  251,  242,
      242,  242,  242,  242,  242,  854,  249,  257,   61,  252,
      253,   61,   61,   61,  255,   61,  259,   61,   61,  268,
      258,  256,   61,   61,  261,  262,   61,   61,  263,  264,
      265,  266,   61,  257,  269,  854,   61,   61,  270,  854,

       61,   61,  259,  854,   61,  268,  854,   61,  854,   61,
      261,  262,   61,   61,  263,  264,  265,  266,   61,  271,
      269,  273,   61,   61,  270,   61,   61,  272,  274,  276,
       61,  277,  275,   61,   61,   61,   61,   61,  854,  278,
      279,   61,  854,  280,  854,  271,   61,  273,   61,   61,
      286,   61,  283,  272,  274,  276,  281,  277,  275,   61,
       61,   61,   61,   61,  287,  278,  279,   61,   61,  280,
      285,  282,   61,   61,   61,   61,  284,   61,  283,   61,
       61,  288,  281,  289,   61,   61,  290,  291,  306,   61,
      287,   61,   61,  307,   61,  854,  285,  282,   61,   61,

       61,   61,  284,   61,  854,   61,   61,  288,  312,  289,
       61,  854,  290,  318,  306,   61,  854,   61,   61,  307,
       61,   61,  854,   61,   61,  854,   61,   61,  854,  854,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  318,
      854,  854,   61,  854,  854,  854,   61,   61,  233,   61,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  235,
       61,  297,  297,  297,  297,  297,  297,  300,   61,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  854,  854,
      854,  854,  854,  854,  854,   61,   61,  297,  297,  297,
      297,  297,  297,  298,  298,  298,  298,  298,  298,  298,

      298,  298,  314,   61,  299,  299,  299,  299,  299,  299,
      854,   61,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  854,  313,  854,  854,  854,  854,  854,  314,   61,
      299,  299,  299,  299,  299,  299,  175,  854,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  177,  854,  302,
      302,  302,  302,  302,  302,  854,   61,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  302,  302,  302,  302,  302,
      302,  175,   61,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  304,  317,  305,  305,  305,  305,  305,  305,

      308,  854,   61,  309,  310,  311,  315,  316,   61,   61,
      854,  320,  321,   61,  854,  319,  854,  328,   61,  317,
      305,  305,  305,  305,  305,  305,  308,   61,   61,  309,
      310,  311,  315,  316,   61,   61,  322,  323,  324,   61,
      325,  319,  329,  326,   61,   61,   61,  327,   61,   61,
       61,   61,   61,   61,  331,  339,   61,  330,   61,  854,
       61,  854,  322,  323,  324,  332,  325,   61,  329,  326,
      335,   61,   61,  327,   61,   61,   61,   61,   61,  333,
      331,   61,   61,  330,   61,  334,   61,  336,  341,   61,
       61,  332,   61,   61,   61,   61,  335,  337,  338,  340,

       61,   61,  342,   61,   61,  333,  343,   61,   61,  345,
      344,  334,   61,  336,  341,   61,   61,  346,   61,   61,
       61,   61,   61,  337,  338,  340,   61,   61,  342,   61,
       61,  348,  343,  350,   61,  345,  344,   61,   61,   61,
       61,  854,  352,  346,  347,   61,  370,  349,   61,   61,
      351,  391,  854,   61,  369,  367,   61,  348,  368,   61,
      392,  380,   61,   61,   61,   61,   61,   61,  352,  854,
      347,  854,  370,  349,  854,   61,  351,  391,   61,   61,
      369,  854,   61,  854,  368,   61,  392,  380,   61,   61,
       61,  854,  355,   61,  295,  295,  295,  295,  295,  295,

      295,  295,  295,  233,   61,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  235,   61,  357,  357,  357,  357,
      357,  357,  854,   61,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  357,  357,  357,  357,  357,  357,  233,   61,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  359,
       61,  360,  360,  360,  360,  360,  360,  854,  371,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  854,  854,
       61,  854,  854,  854,  854,  854,   61,  360,  360,  360,
      360,  360,  360,  175,  371,  362,  362,  362,  362,  362,

      362,  362,  362,  362,  177,  175,   61,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  304,  854,  364,  364,
      364,  364,  364,  364,  854,  854,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  854,  854,  854,  379,  854,
      854,  854,  854,  372,  364,  364,  364,  364,  364,  364,
      365,  365,  365,  365,  365,  365,  365,  365,  365,   61,
      438,  366,  366,  366,  366,  366,  366,  374,  373,  372,
       61,  378,   61,   61,  384,   61,  854,  854,   61,  854,
      854,  854,  854,  854,  854,   61,  438,  366,  366,  366,
      366,  366,  366,  374,  373,  385,   61,  378,   61,   61,

      384,   61,  375,  375,   61,  375,  375,  375,  375,  375,
      375,  376,  381,  375,  382,   61,  388,  383,  386,  390,
       61,  385,   61,  375,  375,   61,   61,   61,  387,  389,
      854,   61,  394,   61,  396,   61,   61,   61,  381,  393,
      382,   61,  388,  383,  386,  390,   61,   61,   61,  401,
      854,   61,   61,   61,  387,  389,  397,   61,  394,   61,
      396,   61,   61,   61,  395,  393,  398,   61,  399,  400,
       61,  402,  403,   61,  404,   61,  406,   61,   61,  854,
       61,  405,  397,   61,   61,  409,  854,   61,   61,  407,
      395,   61,  398,   61,  399,  400,   61,   61,  403,  411,

      404,   61,  406,   61,   61,   61,   61,  405,   61,   61,
       61,  456,  408,   61,   61,  407,  412,   61,   61,   61,
      410,   61,  457,   61,  854,  411,  854,  413,  854,  854,
      854,   61,  854,  854,   61,  854,  854,  456,  408,   61,
      854,  854,  854,  854,   61,   61,  410,   61,  457,   61,
       61,  854,  233,  413,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  235,  854,   61,  420,  420,  420,  420,
      420,  420,  420,  420,  420,   61,   61,  233,  854,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  359,   61,
      420,  420,  420,  420,  420,  420,  423,  854,  361,  361,

      361,  361,  361,  361,  361,  361,  361,  854,  854,  854,
      854,  854,  854,  854,  500,   61,  420,  420,  420,  420,
      420,  420,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  435,   61,  422,  422,  422,  422,  422,  422,  175,
      500,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      854,  854,  854,  854,  854,  854,  854,  435,   61,  422,
      422,  422,  422,  422,  422,  175,  854,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  304,  474,  425,  425,
      425,  425,  425,  425,  854,   61,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  854,   61,  854,  854,  854,

      854,  854,  854,  474,  425,  425,  425,  425,  425,  425,
      175,   61,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  427,   61,  428,  428,  428,  428,  428,  428,  854,
      854,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      432,   61,  434,   61,  436,  433,   61,  441,  854,  428,
      428,  428,  428,  428,  428,  429,   61,   61,  430,  437,
      854,   61,  445,  854,  431,  854,  432,   61,  434,   61,
      436,  433,   61,  441,  447,   61,  439,  446,  854,   61,
       61,  429,   61,   61,  430,  437,  440,   61,  445,  448,
      431,  442,  449,   61,   61,  441,  450,  443,  854,  444,

      447,   61,  439,  446,   61,   61,   61,  854,   61,   61,
      451,  452,  440,  453,   61,  448,  454,  442,  449,   61,
       61,  441,  450,  443,  458,  444,   61,   61,  455,   61,
       61,  461,   61,   61,   61,   61,  451,  452,  854,  453,
       61,  854,  454,   61,   61,   61,  459,   61,  460,  854,
      458,  854,   61,   61,  455,   61,  854,  461,   61,   61,
      462,   61,  465,  466,  467,  463,   61,  469,   61,   61,
       61,   61,  459,   61,  460,  464,   61,  468,  470,  854,
       61,   61,   61,  472,  854,   61,  462,   61,  465,  466,
      467,  463,   61,  469,   61,   61,  477,   61,  471,   61,

      475,  464,   61,  468,  470,   61,   61,   61,   61,  472,
      473,   61,   61,  476,   61,   61,  854,   61,  854,  854,
      854,   61,  477,   61,  471,   61,  475,  854,  514,  854,
      854,   61,  854,  854,  854,  854,  473,  854,   61,  476,
       61,   61,  480,   61,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  233,  514,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  233,  854,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  359,  854,  482,  482,  482,
      482,  482,  482,  854,  515,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  486,  486,  486,  486,  486,  486,

      486,  486,  486,  482,  482,  482,  482,  482,  482,  233,
      515,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      484,  494,  485,  485,  485,  485,  485,  485,  854,   61,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  854,
      854,   61,  854,  854,  854,  854,  854,  494,  485,  485,
      485,  485,  485,  485,  175,   61,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  304,  175,   61,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  427,  854,  488,
      488,  488,  488,  488,  488,  854,  854,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  854,  495,  854,  854,

      854,  854,  854,  854,  491,  488,  488,  488,  488,  488,
      488,  489,  489,  489,  489,  489,  489,  489,  489,  489,
       61,  492,  490,  490,  490,  490,  490,  490,   61,  493,
      491,   61,  497,   61,   61,  501,   61,  499,  498,  854,
      496,  854,  854,  854,   61,   61,   61,  492,  490,  490,
      490,  490,  490,  490,   61,  493,   61,   61,  497,   61,
       61,  501,   61,  499,  498,  502,  496,  503,  504,  505,
       61,   61,  506,  507,  511,   61,   61,  508,  854,  509,
      854,   61,   61,   61,   61,   61,  520,   61,  512,   61,
      510,  502,  854,  503,  504,  505,   61,  513,  506,  507,

      516,   61,   61,  508,   61,  509,   61,   61,   61,   61,
       61,   61,   61,   61,  512,   61,  510,  517,  519,  518,
       61,  521,   61,  513,  524,  525,  516,  527,  522,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
      523,   61,  526,  517,  519,  518,   61,  521,   61,   61,
      524,  525,  854,  527,  522,   61,  528,   61,   61,   61,
      529,   61,   61,   61,  531,   61,  523,   61,  526,   61,
       61,  530,  555,  532,   61,   61,   61,   61,   61,   61,
      854,  854,  528,  854,   61,  854,  529,  854,  854,  854,
      531,  854,  854,  854,  854,   61,   61,  530,  555,  532,

      854,  854,   61,   61,   61,   61,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  233,  854,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  359,  233,  854,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  484,  854,
      538,  538,  538,  538,  538,  538,  854,  854,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  538,  538,  538,  538,
      538,  538,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  546,  549,  540,  540,  540,  540,  540,  540,  854,
       61,  542,  542,  542,  542,  542,  542,  542,  542,  542,

      854,   61,  854,  854,  854,  854,  854,  546,  549,  540,
      540,  540,  540,  540,  540,  175,   61,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  427,   61,  542,  542,
      542,  542,  542,  542,  854,   61,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  854,  854,  854,  854,  854,
      854,  854,  854,  554,  542,  542,  542,  542,  542,  542,
      175,   61,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  544,  547,  545,  545,  545,  545,  545,  545,  548,
      552,   61,  550,  551,   61,  854,   61,   61,  854,   61,
       61,   61,  854,  557,  556,  553,  854,  854,  547,  545,

      545,  545,  545,  545,  545,  548,  552,   61,  550,  551,
       61,   61,   61,   61,   61,   61,   61,   61,  558,  557,
      556,  553,  559,  560,  562,   61,  561,   61,  563,   61,
       61,  564,  565,  566,  568,  567,  569,   61,  570,   61,
       61,   61,   61,  854,  558,   61,   61,   61,  559,  560,
      562,   61,  561,   61,  563,   61,   61,  564,  571,  566,
      568,   61,  569,   61,  570,   61,   61,   61,   61,   61,
      573,   61,   61,   61,  572,  574,  576,   61,  575,   61,
       61,   61,  578,  577,  571,   61,   61,   61,   61,   61,
       61,   61,   61,   61,  580,   61,  573,  581,  579,  854,

      572,  574,  576,   61,  575,   61,   61,   61,  578,  577,
       61,   61,   61,   61,   61,   61,   61,   61,  854,   61,
      580,  854,  854,  581,  579,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  854,  854,   61,  854,  854,   61,
      854,   61,  233,  854,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  484,   61,  585,  585,  585,  585,  585,
      585,  854,  601,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  854,   61,  854,  854,  854,  854,  854,  854,
       61,  585,  585,  585,  585,  585,  585,  233,  601,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  587,   61,

      588,  588,  588,  588,  588,  588,  854,  598,  588,  588,
      588,  588,  588,  588,  588,  588,  588,  854,  854,   61,
      854,  854,  854,  854,  854,  854,  588,  588,  588,  588,
      588,  588,  175,  598,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  427,  175,   61,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  544,  854,  590,  590,  590,
      590,  590,  590,  854,  854,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  854,  854,  854,  854,  854,  854,
      593,  854,   61,  590,  590,  590,  590,  590,  590,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  597,   61,

      592,  592,  592,  592,  592,  592,  593,   61,   61,  595,
      596,  594,   61,  600,   61,  599,   61,  602,  603,   61,
      854,  854,   61,  854,  597,   61,  592,  592,  592,  592,
      592,  592,   61,   61,  604,  595,  596,  594,   61,  600,
       61,  599,   61,  602,  605,   61,  608,  606,   61,  607,
      609,   61,   61,  612,  613,  611,   61,   61,   61,   61,
      604,   61,   61,   61,   61,  610,   61,   61,   61,  854,
      605,   61,  608,  606,  614,  607,  609,   61,   61,  612,
      613,  611,   61,   61,  615,   61,   61,   61,   61,   61,
       61,  610,   61,   61,   61,  616,   61,   61,   61,   61,

      614,  617,  618,   61,  632,  619,   61,  633,   61,  634,
      615,   61,   61,   61,   61,  637,   61,   61,   61,   61,
       61,  616,   61,   61,   61,   61,  854,  617,  618,   61,
      632,  619,   61,  633,   61,  634,  854,   61,  641,   61,
       61,  637,   61,   61,   61,   61,   61,  854,  233,   61,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  484,
      233,  854,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  587,   61,  624,  624,  624,  624,  624,  624,  854,
      854,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      854,  854,  854,  854,  854,  854,  854,  854,   61,  624,

      624,  624,  624,  624,  624,  625,  625,  625,  625,  625,
      625,  625,  625,  625,   61,  635,  626,  626,  626,  626,
      626,  626,  854,   61,  628,  628,  628,  628,  628,  628,
      628,  628,  628,  854,   61,  854,  854,  854,  854,  854,
       61,  635,  626,  626,  626,  626,  626,  626,  175,   61,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  544,
       61,  628,  628,  628,  628,  628,  628,  854,  666,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  854,  854,
      854,  854,  854,  854,  854,  854,  854,  628,  628,  628,
      628,  628,  628,  175,  666,  629,  629,  629,  629,  629,

      629,  629,  629,  629,  630,  636,  631,  631,  631,  631,
      631,  631,  638,  639,   61,  643,  854,  640,  642,  854,
      854,   61,   61,   61,   61,   61,  644,  854,  645,  646,
      854,  636,  631,  631,  631,  631,  631,  631,  638,  639,
       61,  643,   61,  640,  642,   61,   61,   61,   61,   61,
       61,   61,  644,  649,  645,  646,  648,   61,  647,   61,
       61,  854,  650,  854,  854,  854,  854,  854,   61,  854,
      854,   61,   61,   61,   61,  854,   61,  854,  854,  649,
      854,  854,  648,   61,  647,   61,   61,  854,  650,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  673,   61,

       61,  233,   61,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  587,   61,  654,  654,  654,  654,  654,  654,
      854,   61,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  854,   61,  854,  854,  854,  854,  854,  854,   61,
      654,  654,  654,  654,  654,  654,  233,   61,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  656,   61,  657,
      657,  657,  657,  657,  657,  175,  689,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  544,   61,  854,  854,
      854,  854,  854,  854,  854,  657,  657,  657,  657,  657,
      657,  175,  689,  658,  658,  658,  658,  658,  658,  658,

      658,  658,  630,   61,  659,  659,  659,  659,  659,  659,
      854,  854,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  854,  854,  854,  854,  854,  854,  854,  854,  664,
      659,  659,  659,  659,  659,  659,  660,  660,  660,  660,
      660,  660,  660,  660,  660,   61,  665,  661,  661,  661,
      661,  661,  661,  662,   61,  664,  663,   61,  668,  694,
      854,   61,  669,  854,   61,  667,   61,  854,  670,  671,
       61,   61,  665,  661,  661,  661,  661,  661,  661,  662,
       61,   61,  663,   61,  668,  672,  674,   61,  669,   61,
       61,  667,   61,   61,  670,  671,   61,  675,   61,  690,

      676,   61,   61,  691,  701,   61,   61,   61,   61,  854,
      854,  672,  674,  854,  854,   61,  854,  854,  854,   61,
       61,  854,  854,  675,   61,  690,  676,   61,   61,  691,
      701,   61,   61,  233,   61,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  587,  233,   61,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  656,   61,  681,  681,
      681,  681,  681,  681,  854,  854,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  854,  854,  854,  854,  854,
      854,  854,  722,   61,  681,  681,  681,  681,  681,  681,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  693,

       61,  683,  683,  683,  683,  683,  683,  854,   61,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  854,   61,
      854,  854,  854,  854,  854,  693,   61,  683,  683,  683,
      683,  683,  683,  175,   61,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  630,   61,  685,  685,  685,  685,
      685,  685,  854,   61,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  854,  854,  854,  854,  854,  854,  715,
      854,  854,  685,  685,  685,  685,  685,  685,  175,   61,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  687,
      695,  688,  688,  688,  688,  688,  688,  696,  697,  698,

       61,  699,   61,   61,  700,   61,   61,   61,  742,  725,
       61,  854,   61,  854,  854,  854,  695,  688,  688,  688,
      688,  688,  688,  696,  697,  698,   61,  699,   61,   61,
      700,   61,   61,   61,  742,  725,   61,  233,   61,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  656,  743,
      706,  706,  706,  706,  706,  706,  854,   61,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  854,  854,  854,
      854,  854,  854,  854,  854,  743,  706,  706,  706,  706,
      706,  706,  233,   61,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  708,  723,  709,  709,  709,  709,  709,

      709,  854,   61,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  854,  854,   61,  854,  854,  854,  854,  854,
      723,  709,  709,  709,  709,  709,  709,  175,   61,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  630,  175,
       61,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      687,  854,  711,  711,  711,  711,  711,  711,  854,  854,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  854,
      854,  854,  854,  854,  854,  854,  854,  714,  711,  711,
      711,  711,  711,  711,  712,  712,  712,  712,  712,  712,
      712,  712,  712,   61,  716,  713,  713,  713,  713,  713,

      713,  717,  719,  714,   61,  854,  854,  854,  740,  746,
       61,   61,  766,  720,   61,  767,  724,  718,  854,   61,
      716,  713,  713,  713,  713,  713,  713,  717,  719,  721,
       61,   61,   61,  726,  740,  746,   61,   61,  766,  720,
       61,  767,  724,  718,  854,   61,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  721,  854,   61,   61,  726,
      854,  854,  854,  854,  747,  748,  749,  854,  750,  854,
      233,   61,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  656,  233,  854,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  708,   61,  732,  732,  732,  732,  732,

      732,  854,  854,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  854,  854,  854,  854,  854,  854,  854,  751,
       61,  732,  732,  732,  732,  732,  732,  733,  733,  733,
      733,  733,  733,  733,  733,  733,   61,   61,  734,  734,
      734,  734,  734,  734,  854,  751,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  854,  741,  854,  854,  854,
      854,  854,   61,   61,  734,  734,  734,  734,  734,  734,
      175,   61,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  687,  741,  736,  736,  736,  736,  736,  736,  854,
      854,  854,  854,  854,  854,  854,  854,   61,  758,  758,

      758,  758,  758,  758,  758,  758,  758,  854,  752,  736,
      736,  736,  736,  736,  736,  175,   61,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  738,  744,  739,  739,
      739,  739,  739,  739,  752,  745,   61,  765,   61,   61,
      764,   61,   61,   61,   61,  854,  854,  854,  854,  854,
      854,  854,  854,  744,  739,  739,  739,  739,  739,  739,
      772,  745,   61,  765,   61,   61,  764,   61,  854,   61,
       61,  233,  773,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  708,   61,  758,  758,  758,  758,  758,  758,
      854,  785,  760,  760,  760,  760,  760,  760,  760,  760,

      760,  854,   61,  854,  854,  854,  854,  854,  854,   61,
      758,  758,  758,  758,  758,  758,  233,  785,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  768,   61,  760,
      760,  760,  760,  760,  760,  175,  786,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  687,   61,  854,  854,
      854,  854,  854,  768,  854,  760,  760,  760,  760,  760,
      760,  175,  786,  761,  761,  761,  761,  761,  761,  761,
      761,  761,  738,   61,  762,  762,  762,  762,  762,  762,
      854,  769,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  770,  774,  775,  771,  784,  854,   61,  854,  854,

      762,  762,  762,  762,  762,  762,  854,  769,   61,   61,
       61,  787,   61,   61,  793,  854,  801,   61,  774,  775,
       61,  784,  233,   61,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  708,   61,   61,   61,  787,   61,   61,
      793,  788,  801,   61,  854,  854,   61,  233,  854,  779,
      779,  779,  779,  779,  779,  779,  779,  779,   61,   61,
      780,  780,  780,  780,  780,  780,  854,  788,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  789,  854,  854,
      854,  854,  854,  854,   61,   61,  780,  780,  780,  780,
      780,  780,  175,  854,  781,  781,  781,  781,  781,  781,

      781,  781,  781,  738,   61,  782,  782,  782,  782,  782,
      782,  854,  790,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  791,  792,   61,  854,  854,  854,  854,  854,
       61,  782,  782,  782,  782,  782,  782,   61,  854,  854,
      798,  798,  798,  798,  798,  798,  798,  798,  798,   61,
       61,  175,   61,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  738,   61,   61,  800,  854,  854,  854,  854,
      854,  854,   61,   61,  803,   61,   61,  854,   61,  233,
      854,  797,  797,  797,  797,  797,  797,  797,  797,  797,
       61,  800,  798,  798,  798,  798,  798,  798,   61,   61,

      803,   61,   61,  802,  802,  854,  802,  802,  802,  802,
      802,  802,   61,  819,  802,  809,  810,  854,  798,  798,
      798,  798,  798,  798,  802,  802,  233,   61,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  820,   61,  819,
      823,  809,  810,  808,  808,  827,  808,  808,  808,  808,
      808,  808,  812,  813,  808,  817,  818,  821,  822,  828,
       61,  824,  829,  820,  808,  808,  823,   61,   61,   61,
      830,  827,  836,  831,   61,  832,   61,  837,  812,  813,
       61,  817,  818,  821,  822,  828,   61,  824,  829,   61,
       61,  838,   61,   61,   61,   61,  830,  842,  836,  831,

       61,  832,   61,  837,  839,  843,   61,   61,   61,  854,
      854,  854,  854,  854,  854,   61,   61,  838,   61,  854,
      854,  854,  854,  842,   61,   61,  854,  854,  854,  854,
      839,  843,  854,   61,   61,  854,  854,  854,  854,  854,
      854,  854,  854,  854,  854,  854,  854,  854,  854,  854,
       61,   61,   41,   41,   41,   41,   43,   43,   43,   43,
       47,   47,   47,   47,   49,  854,   49,   49,   50,   50,
       50,   50,  112,  854,  112,  112,  115,  115,  171,  171,
      231,  231,  232,  232,  292,  292,  293,  293,  353,  353,
      354,  354,  377,  854,  377,  377,  414,  414,  415,  415,

      478,  478,  479,  479,  533,  533,  534,  534,  582,  582,
      583,  583,  620,  620,  621,  621,  651,  651,  652,  652,
      677,  677,  678,  678,  702,  702,  703,  703,  727,  727,
      728,  728,  753,  753,  755,  755,  776,  776,  777,  777,
      794,  794,  795,  795,  802,  854,  802,  802,  804,  854,
      804,  804,  805,  805,  808,  854,  808,  808,  811,  854,
      811,  811,  814,  814,  815,  815,  825,  825,  833,  833,
      834,  834,  840,  840,  844,  844,  845,  845,  847,  847,
      849,  849,  850,  850,  852,  852,  853,  853,    7,  854,
      854,  854,  854,  854,  854,  854,  854,  854,  854,  854,

      854,  854,  854,  854,  854,  854,  854,  854,  854,  854,
      854,  854,  854,  854,  854,  854,  854,  854,  854,  854,
      854,  854,  854,  854,  854,  854,  854,  854,  854,  854,
      854,  854,  854,  854,  854,  854,  854,  854,  854,  854,
      854,  854,  854,  854,  854,  854,  854,  854,  854,  854,
      854,  854,  854,  854,  854,  854,  854,  854,  854,  854,
      854,  854,  854,  854
    } ;

static yyconst flex_int16_t yy_chk[5365] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   10,   10,   11,   11,   15,
       17,   27,  922,   15,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   24,   16,   16,   16,   16,   16,

       16,   28,   16,   37,   61,   24,   17,   27,   24,   28,
       37,   63,   30,   44,   44,   64,   28,   24,   16,  918,
       24,   16,   16,   16,   16,   16,   16,   28,   16,   37,
       61,   24,   30,  914,   24,   28,   37,   63,   30,   45,
       45,   64,   28,   24,   16,   20,   20,  910,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   30,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   21,   21,   32,  904,   32,  903,   39,   32,  899,
       21,  896,   21,   39,   46,   46,   65,   66,   29,   21,
      895,   25,  892,  889,   29,  862,   66,   21,   21,   32,
       29,   32,   25,   39,   32,   25,   21,   25,   21,   39,
      853,   69,   65,   66,   29,   21,   22,   25,   22,   22,
       29,   33,   66,   68,   68,   72,   29,   22,   25,   22,
       22,   25,   33,   25,  852,   33,   22,   69,   33,  850,
      849,  848,   22,  847,   22,   22,  845,   33,  844,   68,
       68,   72,   40,   22,   31,   22,   22,  841,   33,   73,

       31,   33,   22,   23,   33,   31,   31,   23,   40,   35,
       35,   23,   71,   73,   23,   78,   23,   23,   40,   71,
       31,   35,   35,   23,  840,   73,   31,  834,  833,   23,
      826,   31,   31,   23,   40,   35,   35,   23,   71,   73,
       23,   78,   23,   23,   80,   71,  825,   35,   35,   23,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       80,   26,   26,   26,   26,   26,   26,  815,   26,  814,
       80,   87,   26,   34,  806,   26,  805,   34,  795,  794,
       38,   26,  782,  778,   38,   67,   80,   26,   26,   26,
       26,   26,   26,   34,   26,   36,   36,   87,   26,   34,

       38,   26,   67,   34,   70,   36,   38,   26,   76,   75,
       38,   67,   70,   36,   74,   90,   74,   75,   88,   34,
       76,   83,   36,   88,   70,   36,   38,  777,   67,  776,
       70,   36,  758,  755,   76,   75,   83,  753,   70,   36,
       74,   90,   74,   75,   88,  736,   76,   83,   36,   88,
       70,   36,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   83,   54,   54,   54,   54,   54,   54,  730,
       54,   56,   56,   56,   56,   56,   56,   56,   56,   56,
      729,   84,  728,  727,  706,  703,  702,  685,  100,   54,
       54,   54,   54,   54,   54,   84,   54,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   79,   84,   59,   59,
       59,   59,   59,   59,  100,  679,  678,  677,  666,  654,
      652,   84,  651,   79,  628,  622,  621,  620,  585,  583,
      582,  542,   79,  535,   59,   59,   59,   59,   59,   59,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   79,
       81,   62,   62,   62,   62,   62,   62,   85,   85,   77,
      534,   91,   62,   77,   77,   62,   86,   82,   86,  533,
       81,   89,   89,  482,  479,  478,   81,   62,   62,   62,
       62,   62,   62,   85,   85,   77,   82,   82,   62,   77,
       77,   62,   86,   82,   86,   91,   81,   89,   89,   92,

       93,   94,   96,   97,   98,   92,   94,   95,   97,   95,
       95,  101,   82,   82,  104,  102,   93,  425,   95,   99,
      416,   91,   96,  415,   98,   92,   93,   94,   96,   97,
       98,   92,   94,   95,   97,   95,   95,  101,   99,  103,
      104,  121,   93,  106,   95,   99,  105,  103,   96,  102,
       98,  107,  108,  105,  109,  106,  110,  109,  110,  108,
      107,  414,  357,  354,   99,  103,  353,  121,  302,  106,
      294,  122,  105,  103,  293,  102,  292,  107,  108,  105,
      109,  106,  110,  109,  110,  108,  107,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  122,  113,  113,

      113,  113,  113,  113,  124,  113,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  126,  132,  242,  232,  231,
      230,  204,  172,  171,  113,  113,  113,  113,  113,  113,
      124,  113,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  126,  115,  116,  116,  116,  116,  116,  116,  119,
      132,  119,  119,  119,  119,  119,  119,  119,  119,  119,
       55,  138,   51,   50,   47,   42,   19,   18,  138,  116,
      116,  116,  116,  116,  116,  118,  132,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  138,  118,  118,
      118,  118,  118,  118,  138,  170,  170,  170,  170,  170,

      170,  170,  170,  170,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  168,  118,  118,  118,  118,  118,  118,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  125,
      128,  120,  120,  120,  120,  120,  120,  123,  127,  168,
      127,   14,  125,  123,  129,  129,  128,  130,   12,  131,
      134,  130,    7,    4,  133,  125,  128,  120,  120,  120,
      120,  120,  120,  123,  127,  131,  127,  134,  125,  123,
      129,  129,  128,  130,  133,  131,  134,  130,  135,  136,
      133,  137,  136,  137,  139,  140,  139,  144,  141,    3,
        0,  131,  147,  134,  135,  146,  146,  142,  145,  143,

      133,  153,  157,  140,  135,  136,  141,  137,  136,  137,
      139,  140,  139,  142,  141,  143,  145,  153,    0,  148,
      135,  144,    0,  142,  145,  143,  147,  153,  150,  140,
      146,  148,  141,    0,  151,  149,  157,  150,  152,  142,
        0,  143,  145,  153,  149,  148,  154,  144,  149,  151,
      152,  180,  147,  149,  150,  156,  146,  148,  156,  155,
      151,  149,  157,  150,  152,  155,  154,  158,  158,  159,
      149,  159,  154,  161,  149,  151,  152,  180,  160,  149,
      163,  156,  162,  164,  156,  155,  166,  163,  165,  161,
      188,  155,  154,  158,  158,  159,  160,  159,  162,  161,

      165,  164,  192,  166,  160,  196,  163,  167,  162,  164,
        0,    0,  166,  163,  165,  161,  188,  167,    0,    0,
      183,    0,  160,    0,  162,    0,  165,  164,  192,  166,
        0,  196,  174,  167,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  167,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  183,  169,  169,  169,  169,  169,
      169,  178,  169,  178,  178,  178,  178,  178,  178,  178,
      178,  178,    0,    0,    0,  191,    0,    0,    0,    0,
      183,  169,  169,  169,  169,  169,  169,  191,  169,  173,
      211,  173,  173,  173,  173,  173,  173,  173,  173,  173,

      173,  191,  173,  173,  173,  173,  173,  173,    0,  223,
        0,    0,    0,  191,    0,    0,  211,    0,    0,    0,
      186,    0,    0,    0,    0,    0,    0,  186,  173,  173,
      173,  173,  173,  173,  176,  223,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  186,  176,  176,  176,
      176,  176,  176,  186,  181,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,    0,    0,    0,    0,    0,
      199,  199,  181,  176,  176,  176,  176,  176,  176,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  181,    0,
      177,  177,  177,  177,  177,  177,  199,  199,  181,  233,

      233,  233,  233,  233,  233,  233,  233,  233,    0,    0,
        0,    0,    0,  182,  181,  182,  177,  177,  177,  177,
      177,  177,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  184,  187,  179,  179,  179,  179,  179,  179,  182,
      185,  182,  185,  189,  190,  189,  190,  184,  193,    0,
        0,  193,  187,    0,  197,  194,  197,  184,  187,  179,
      179,  179,  179,  179,  179,    0,  185,  195,  185,  189,
      190,  189,  190,  184,  193,  194,  198,  193,  187,  205,
      197,  194,  197,  195,  200,  201,  201,  200,  202,  202,
      202,  203,  198,  195,  205,    0,  205,  202,  206,    0,

      206,  194,  198,    0,  203,  205,    0,  246,    0,  195,
      200,  201,  201,  200,  202,  202,  202,  203,  198,  207,
      205,  209,  205,  202,  206,  207,  206,  208,  210,  213,
      203,  214,  212,  246,  210,  215,  208,  209,    0,  215,
      216,  216,    0,  217,    0,  207,  213,  209,  212,  214,
      222,  207,  219,  208,  210,  213,  218,  214,  212,  217,
      210,  215,  208,  209,  224,  215,  216,  216,  219,  217,
      221,  218,  213,  218,  212,  214,  220,  220,  219,  221,
      224,  225,  218,  226,  222,  217,  227,  228,  243,  243,
      224,  256,  227,  244,  219,    0,  221,  218,  244,  218,

      226,  225,  220,  220,    0,  221,  224,  225,  248,  226,
      222,    0,  227,  254,  243,  243,    0,  256,  227,  244,
      254,  228,    0,  257,  244,    0,  226,  225,  236,    0,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  254,
        0,    0,  248,    0,    0,    0,  254,  228,  234,  257,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      278,  234,  234,  234,  234,  234,  234,  237,  248,  237,
      237,  237,  237,  237,  237,  237,  237,  237,    0,    0,
        0,    0,    0,    0,    0,  280,  278,  234,  234,  234,
      234,  234,  234,  235,  235,  235,  235,  235,  235,  235,

      235,  235,  250,  250,  235,  235,  235,  235,  235,  235,
      239,  280,  239,  239,  239,  239,  239,  239,  239,  239,
      239,    0,  249,    0,    0,    0,    0,    0,  250,  250,
      235,  235,  235,  235,  235,  235,  238,    0,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,    0,  238,
      238,  238,  238,  238,  238,  241,  249,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  238,  238,  238,  238,  238,
      238,  240,  249,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  253,  240,  240,  240,  240,  240,  240,

      245,    0,  245,  247,  247,  247,  251,  252,  252,  253,
        0,  258,  259,  247,    0,  255,    0,  266,  251,  253,
      240,  240,  240,  240,  240,  240,  245,  255,  245,  247,
      247,  247,  251,  252,  252,  253,  260,  261,  262,  247,
      263,  255,  267,  264,  251,  258,  259,  265,  260,  264,
      262,  266,  261,  255,  268,  276,  263,  267,  318,    0,
      268,    0,  260,  261,  262,  269,  263,  265,  267,  264,
      272,  258,  259,  265,  260,  264,  262,  266,  261,  270,
      268,  269,  263,  267,  318,  271,  268,  273,  279,  276,
      272,  269,  271,  265,  273,  270,  272,  274,  275,  277,

      277,  275,  281,  274,  279,  270,  282,  269,  281,  284,
      283,  271,  284,  273,  279,  276,  272,  285,  271,  283,
      273,  270,  282,  274,  275,  277,  277,  275,  281,  274,
      279,  287,  282,  289,  281,  284,  283,  285,  284,  286,
      287,    0,  291,  285,  286,  283,  309,  288,  282,  288,
      290,  329,    0,  290,  308,  306,  308,  287,  307,  291,
      330,  317,  309,  285,  317,  286,  287,  289,  291,    0,
      286,    0,  309,  288,    0,  288,  290,  329,  307,  290,
      308,    0,  308,    0,  307,  291,  330,  317,  309,  306,
      317,    0,  295,  289,  295,  295,  295,  295,  295,  295,

      295,  295,  295,  296,  307,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  306,  296,  296,  296,  296,
      296,  296,  297,  334,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  296,  296,  296,  296,  296,  296,  298,  334,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      369,  298,  298,  298,  298,  298,  298,  299,  310,  299,
      299,  299,  299,  299,  299,  299,  299,  299,    0,    0,
      310,    0,    0,    0,    0,    0,  369,  298,  298,  298,
      298,  298,  298,  301,  310,  301,  301,  301,  301,  301,

      301,  301,  301,  301,  301,  303,  310,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,    0,  303,  303,
      303,  303,  303,  303,  305,    0,  305,  305,  305,  305,
      305,  305,  305,  305,  305,    0,    0,    0,  316,    0,
        0,    0,    0,  311,  303,  303,  303,  303,  303,  303,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  311,
      375,  304,  304,  304,  304,  304,  304,  313,  312,  311,
      312,  315,  316,  322,  322,  313,    0,    0,  315,    0,
        0,    0,    0,    0,    0,  311,  375,  304,  304,  304,
      304,  304,  304,  313,  312,  323,  312,  315,  316,  322,

      322,  313,  314,  314,  315,  314,  314,  314,  314,  314,
      314,  314,  319,  314,  320,  323,  326,  321,  324,  328,
      319,  323,  320,  314,  314,  321,  324,  325,  325,  327,
        0,  328,  332,  326,  335,  332,  335,  327,  319,  331,
      320,  323,  326,  321,  324,  328,  319,  331,  320,  340,
        0,  321,  324,  325,  325,  327,  336,  328,  332,  326,
      335,  332,  335,  327,  333,  331,  337,  333,  338,  339,
      336,  341,  342,  331,  343,  337,  345,  343,  378,    0,
      342,  344,  336,  340,  338,  348,    0,  339,  345,  346,
      333,  346,  337,  333,  338,  339,  336,  344,  342,  350,

      343,  337,  345,  343,  378,  341,  342,  344,  350,  340,
      338,  391,  347,  339,  345,  346,  351,  346,  347,  348,
      349,  349,  392,  344,    0,  350,    0,  352,    0,    0,
        0,  341,    0,    0,  350,    0,    0,  391,  347,  352,
        0,    0,    0,    0,  347,  348,  349,  349,  392,  398,
      351,    0,  356,  352,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  360,  352,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  398,  351,  358,    0,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  410,
      358,  358,  358,  358,  358,  358,  361,    0,  361,  361,

      361,  361,  361,  361,  361,  361,  361,    0,    0,    0,
        0,    0,    0,    0,  438,  410,  358,  358,  358,  358,
      358,  358,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  372,  372,  359,  359,  359,  359,  359,  359,  362,
      438,  362,  362,  362,  362,  362,  362,  362,  362,  362,
        0,    0,    0,    0,    0,    0,    0,  372,  372,  359,
      359,  359,  359,  359,  359,  363,    0,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  409,  363,  363,
      363,  363,  363,  363,  364,  409,  364,  364,  364,  364,
      364,  364,  364,  364,  364,    0,  451,    0,    0,    0,

        0,    0,    0,  409,  363,  363,  363,  363,  363,  363,
      365,  409,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  451,  365,  365,  365,  365,  365,  365,  366,
        0,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      368,  370,  371,  368,  373,  370,  377,  377,    0,  365,
      365,  365,  365,  365,  365,  367,  373,  371,  367,  374,
        0,  380,  380,    0,  367,    0,  368,  370,  371,  368,
      373,  370,  377,  377,  382,  453,  376,  381,    0,  374,
      382,  367,  373,  371,  367,  374,  376,  380,  380,  383,
      367,  379,  384,  381,  376,  376,  385,  379,    0,  379,

      382,  453,  376,  381,  379,  374,  382,    0,  384,  383,
      386,  387,  376,  388,  385,  383,  389,  379,  384,  381,
      376,  376,  385,  379,  393,  379,  386,  387,  390,  388,
      379,  396,  389,  396,  384,  383,  386,  387,    0,  388,
      385,    0,  389,  390,  393,  394,  394,  395,  395,    0,
      393,    0,  386,  387,  390,  388,    0,  396,  389,  396,
      397,  397,  400,  401,  402,  399,  404,  404,  400,  390,
      393,  394,  394,  395,  395,  399,  402,  403,  405,    0,
      405,  401,  399,  407,    0,  407,  397,  397,  400,  401,
      402,  399,  404,  404,  400,  454,  413,  403,  406,  413,

      411,  399,  402,  403,  405,  406,  405,  401,  399,  407,
      408,  407,  411,  412,  455,  412,    0,  408,    0,    0,
        0,  454,  413,  403,  406,  413,  411,    0,  456,    0,
        0,  406,    0,    0,    0,    0,  408,    0,  411,  412,
      455,  412,  417,  408,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  418,  456,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  419,    0,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,    0,  419,  419,  419,
      419,  419,  419,  420,  457,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  423,  423,  423,  423,  423,  423,

      423,  423,  423,  419,  419,  419,  419,  419,  419,  421,
      457,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  432,  421,  421,  421,  421,  421,  421,  422,  461,
      422,  422,  422,  422,  422,  422,  422,  422,  422,    0,
        0,  432,    0,    0,    0,    0,    0,  432,  421,  421,
      421,  421,  421,  421,  424,  461,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  426,  432,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,    0,  426,
      426,  426,  426,  426,  426,  428,    0,  428,  428,  428,
      428,  428,  428,  428,  428,  428,    0,  433,    0,    0,

        0,    0,    0,    0,  429,  426,  426,  426,  426,  426,
      426,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      429,  430,  427,  427,  427,  427,  427,  427,  430,  431,
      429,  433,  435,  436,  437,  439,  431,  437,  436,    0,
      434,    0,    0,    0,  439,  435,  429,  430,  427,  427,
      427,  427,  427,  427,  430,  431,  434,  433,  435,  436,
      437,  439,  431,  437,  436,  440,  434,  441,  442,  443,
      439,  435,  444,  445,  449,  443,  442,  446,    0,  447,
        0,  444,  434,  441,  446,  440,  463,  448,  450,  445,
      448,  440,    0,  441,  442,  443,  447,  452,  444,  445,

      458,  443,  442,  446,  450,  447,  452,  444,  449,  441,
      446,  440,  458,  448,  450,  445,  448,  459,  462,  460,
      463,  464,  447,  452,  467,  468,  458,  470,  465,  470,
      450,  462,  452,  459,  449,  460,  465,  468,  458,  464,
      466,  467,  469,  459,  462,  460,  463,  464,  472,  466,
      467,  468,    0,  470,  465,  470,  471,  462,  469,  459,
      473,  460,  465,  468,  475,  464,  466,  467,  469,  477,
      471,  474,  500,  476,  472,  466,  473,  474,  476,  475,
        0,    0,  471,    0,  469,    0,  473,    0,    0,    0,
      475,    0,    0,    0,    0,  477,  471,  474,  500,  476,

        0,    0,  473,  474,  476,  475,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  481,    0,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  483,    0,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,    0,
      483,  483,  483,  483,  483,  483,  485,    0,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  483,  483,  483,  483,
      483,  483,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  491,  494,  484,  484,  484,  484,  484,  484,  488,
      494,  488,  488,  488,  488,  488,  488,  488,  488,  488,

        0,  491,    0,    0,    0,    0,    0,  491,  494,  484,
      484,  484,  484,  484,  484,  487,  494,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  491,  487,  487,
      487,  487,  487,  487,  490,  513,  490,  490,  490,  490,
      490,  490,  490,  490,  490,    0,    0,    0,    0,    0,
        0,    0,    0,  499,  487,  487,  487,  487,  487,  487,
      489,  513,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  492,  489,  489,  489,  489,  489,  489,  493,
      497,  492,  495,  496,  496,    0,  497,  499,    0,  493,
      502,  495,    0,  502,  501,  498,    0,    0,  492,  489,

      489,  489,  489,  489,  489,  493,  497,  492,  495,  496,
      496,  498,  497,  499,  501,  493,  502,  495,  503,  502,
      501,  498,  504,  505,  507,  503,  506,  507,  508,  508,
      505,  509,  510,  511,  514,  512,  515,  498,  516,  519,
      501,  511,  504,    0,  503,  516,  506,  509,  504,  505,
      507,  503,  506,  507,  508,  508,  505,  509,  517,  511,
      514,  517,  515,  524,  516,  519,  510,  511,  504,  512,
      520,  516,  506,  509,  518,  521,  523,  518,  522,  520,
      527,  528,  526,  525,  517,  526,  522,  517,  523,  524,
      525,  521,  510,  529,  531,  512,  520,  532,  530,    0,

      518,  521,  523,  518,  522,  520,  527,  528,  526,  525,
      531,  526,  522,  532,  523,  530,  525,  521,    0,  529,
      531,    0,    0,  532,  530,  536,  536,  536,  536,  536,
      536,  536,  536,  536,    0,    0,  531,    0,    0,  532,
        0,  530,  537,    0,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  553,  537,  537,  537,  537,  537,
      537,  538,  555,  538,  538,  538,  538,  538,  538,  538,
      538,  538,    0,  562,    0,    0,    0,    0,    0,    0,
      553,  537,  537,  537,  537,  537,  537,  539,  555,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  562,

      539,  539,  539,  539,  539,  539,  540,  551,  540,  540,
      540,  540,  540,  540,  540,  540,  540,    0,    0,  551,
        0,    0,    0,    0,    0,    0,  539,  539,  539,  539,
      539,  539,  541,  551,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  543,  551,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,    0,  543,  543,  543,
      543,  543,  543,  545,    0,  545,  545,  545,  545,  545,
      545,  545,  545,  545,    0,    0,    0,    0,    0,    0,
      546,    0,  546,  543,  543,  543,  543,  543,  543,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  550,  564,

      544,  544,  544,  544,  544,  544,  546,  547,  546,  548,
      549,  547,  549,  554,  550,  552,  548,  556,  557,  556,
        0,    0,  554,    0,  550,  564,  544,  544,  544,  544,
      544,  544,  552,  547,  558,  548,  549,  547,  549,  554,
      550,  552,  548,  556,  559,  556,  563,  560,  554,  561,
      565,  558,  557,  568,  569,  567,  570,  571,  552,  565,
      558,  561,  559,  560,  572,  566,  563,  567,  574,    0,
      559,  566,  563,  560,  573,  561,  565,  558,  557,  568,
      569,  567,  570,  571,  575,  565,  573,  561,  559,  560,
      572,  566,  563,  567,  574,  576,  575,  566,  577,  578,

      573,  579,  580,  580,  593,  581,  594,  595,  596,  597,
      575,  576,  573,  595,  599,  601,  597,  579,  606,  617,
      593,  576,  575,  581,  577,  578,    0,  579,  580,  580,
      593,  581,  594,  595,  596,  597,    0,  576,  605,  595,
      599,  601,  597,  579,  606,  617,  593,    0,  584,  581,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      586,    0,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  605,  586,  586,  586,  586,  586,  586,  588,
        0,  588,  588,  588,  588,  588,  588,  588,  588,  588,
        0,    0,    0,    0,    0,    0,    0,    0,  605,  586,

      586,  586,  586,  586,  586,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  619,  598,  587,  587,  587,  587,
      587,  587,  590,  598,  590,  590,  590,  590,  590,  590,
      590,  590,  590,    0,  634,    0,    0,    0,    0,    0,
      619,  598,  587,  587,  587,  587,  587,  587,  589,  598,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      634,  589,  589,  589,  589,  589,  589,  592,  637,  592,
      592,  592,  592,  592,  592,  592,  592,  592,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  589,  589,  589,
      589,  589,  589,  591,  637,  591,  591,  591,  591,  591,

      591,  591,  591,  591,  591,  600,  591,  591,  591,  591,
      591,  591,  602,  603,  602,  608,    0,  604,  607,    0,
        0,  600,  603,  604,  608,  607,  609,    0,  610,  611,
        0,  600,  591,  591,  591,  591,  591,  591,  602,  603,
      602,  608,  609,  604,  607,  610,  611,  600,  603,  604,
      608,  607,  609,  616,  610,  611,  615,  615,  614,  638,
      616,    0,  618,    0,    0,    0,    0,    0,  609,    0,
        0,  610,  611,  614,  618,    0,  642,    0,    0,  616,
        0,    0,  615,  615,  614,  638,  616,  624,  618,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  646,  614,

      618,  623,  642,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  643,  623,  623,  623,  623,  623,  623,
      626,  648,  626,  626,  626,  626,  626,  626,  626,  626,
      626,    0,  646,    0,    0,    0,    0,    0,    0,  643,
      623,  623,  623,  623,  623,  623,  625,  648,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  646,  625,
      625,  625,  625,  625,  625,  627,  662,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  664,    0,    0,
        0,    0,    0,    0,    0,  625,  625,  625,  625,  625,
      625,  629,  662,  629,  629,  629,  629,  629,  629,  629,

      629,  629,  629,  664,  629,  629,  629,  629,  629,  629,
      631,    0,  631,  631,  631,  631,  631,  631,  631,  631,
      631,    0,    0,    0,    0,    0,    0,    0,    0,  635,
      629,  629,  629,  629,  629,  629,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  635,  636,  630,  630,  630,
      630,  630,  630,  632,  633,  635,  633,  632,  640,  668,
        0,  640,  641,    0,  672,  639,  636,    0,  641,  644,
      641,  635,  636,  630,  630,  630,  630,  630,  630,  632,
      633,  639,  633,  632,  640,  645,  647,  640,  641,  644,
      672,  639,  636,  668,  641,  644,  641,  649,  649,  663,

      650,  645,  647,  665,  676,  665,  663,  639,  650,    0,
        0,  645,  647,    0,    0,  644,    0,    0,    0,  668,
      676,    0,    0,  649,  649,  663,  650,  645,  647,  665,
      676,  665,  663,  653,  650,  653,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  655,  676,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  700,  655,  655,
      655,  655,  655,  655,  657,    0,  657,  657,  657,  657,
      657,  657,  657,  657,  657,    0,    0,    0,    0,    0,
        0,    0,  695,  700,  655,  655,  655,  655,  655,  655,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  667,

      701,  656,  656,  656,  656,  656,  656,  659,  695,  659,
      659,  659,  659,  659,  659,  659,  659,  659,    0,  667,
        0,    0,    0,    0,    0,  667,  701,  656,  656,  656,
      656,  656,  656,  658,  695,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  667,  658,  658,  658,  658,
      658,  658,  661,  716,  661,  661,  661,  661,  661,  661,
      661,  661,  661,    0,    0,    0,    0,    0,    0,  690,
        0,    0,  658,  658,  658,  658,  658,  658,  660,  716,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      669,  660,  660,  660,  660,  660,  660,  670,  671,  673,

      671,  674,  674,  690,  675,  673,  675,  669,  717,  698,
      670,    0,  698,    0,    0,    0,  669,  660,  660,  660,
      660,  660,  660,  670,  671,  673,  671,  674,  674,  690,
      675,  673,  675,  669,  717,  698,  670,  680,  698,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  718,
      680,  680,  680,  680,  680,  680,  681,  722,  681,  681,
      681,  681,  681,  681,  681,  681,  681,    0,    0,    0,
        0,    0,    0,    0,    0,  718,  680,  680,  680,  680,
      680,  680,  682,  722,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  696,  682,  682,  682,  682,  682,

      682,  683,  724,  683,  683,  683,  683,  683,  683,  683,
      683,  683,    0,    0,  696,    0,    0,    0,    0,    0,
      696,  682,  682,  682,  682,  682,  682,  684,  724,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  686,
      696,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,    0,  686,  686,  686,  686,  686,  686,  688,    0,
      688,  688,  688,  688,  688,  688,  688,  688,  688,    0,
        0,    0,    0,    0,    0,    0,    0,  689,  686,  686,
      686,  686,  686,  686,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  689,  691,  687,  687,  687,  687,  687,

      687,  692,  693,  689,  693,    0,    0,    0,  714,  721,
      691,  714,  742,  694,  721,  743,  697,  692,    0,  689,
      691,  687,  687,  687,  687,  687,  687,  692,  693,  694,
      693,  694,  697,  699,  714,  721,  691,  714,  742,  694,
      721,  743,  697,  692,  709,  699,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  694,    0,  694,  697,  699,
        0,    0,    0,    0,  723,  723,  723,    0,  723,    0,
      705,  699,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  707,    0,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  707,  723,  707,  707,  707,  707,  707,

      707,  711,    0,  711,  711,  711,  711,  711,  711,  711,
      711,  711,    0,    0,    0,    0,    0,    0,    0,  725,
      723,  707,  707,  707,  707,  707,  707,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  725,  744,  708,  708,
      708,  708,  708,  708,  713,  725,  713,  713,  713,  713,
      713,  713,  713,  713,  713,    0,  715,    0,    0,    0,
        0,    0,  725,  744,  708,  708,  708,  708,  708,  708,
      710,  715,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  715,  710,  710,  710,  710,  710,  710,    0,
        0,    0,    0,    0,    0,    0,  732,  715,  732,  732,

      732,  732,  732,  732,  732,  732,  732,    0,  726,  710,
      710,  710,  710,  710,  710,  712,  726,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  719,  712,  712,
      712,  712,  712,  712,  726,  720,  740,  741,  747,  764,
      740,  741,  726,  719,  720,    0,    0,    0,    0,    0,
        0,    0,    0,  719,  712,  712,  712,  712,  712,  712,
      749,  720,  740,  741,  747,  764,  740,  741,    0,  719,
      720,  731,  750,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  749,  731,  731,  731,  731,  731,  731,
      734,  766,  734,  734,  734,  734,  734,  734,  734,  734,

      734,    0,  750,    0,    0,    0,    0,    0,    0,  749,
      731,  731,  731,  731,  731,  731,  733,  766,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  745,  750,  733,
      733,  733,  733,  733,  733,  735,  767,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  745,    0,    0,
        0,    0,    0,  745,    0,  733,  733,  733,  733,  733,
      733,  737,  767,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  745,  737,  737,  737,  737,  737,  737,
      739,  746,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  748,  751,  752,  748,  765,    0,  746,    0,    0,

      737,  737,  737,  737,  737,  737,    0,  746,  751,  752,
      775,  768,  765,  768,  774,    0,  785,  774,  751,  752,
      748,  765,  757,  746,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  751,  752,  775,  768,  765,  768,
      774,  769,  785,  774,    0,    0,  748,  759,    0,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  789,  769,
      759,  759,  759,  759,  759,  759,  760,  769,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  770,    0,    0,
        0,    0,    0,    0,  789,  769,  759,  759,  759,  759,
      759,  759,  761,    0,  761,  761,  761,  761,  761,  761,

      761,  761,  761,  761,  770,  761,  761,  761,  761,  761,
      761,  762,  771,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  772,  773,  790,    0,    0,    0,    0,    0,
      770,  761,  761,  761,  761,  761,  761,  771,  780,    0,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  772,
      790,  781,  773,  781,  781,  781,  781,  781,  781,  781,
      781,  781,  781,  771,  791,  784,    0,    0,    0,    0,
        0,    0,  784,  792,  787,  772,  787,    0,  773,  779,
        0,  779,  779,  779,  779,  779,  779,  779,  779,  779,
      791,  784,  779,  779,  779,  779,  779,  779,  784,  792,

      787,  793,  787,  788,  788,    0,  788,  788,  788,  788,
      788,  788,  800,  809,  788,  802,  802,    0,  779,  779,
      779,  779,  779,  779,  788,  788,  797,  793,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  810,  800,  809,
      812,  802,  802,  803,  803,  817,  803,  803,  803,  803,
      803,  803,  804,  804,  803,  808,  808,  811,  811,  818,
      812,  813,  819,  810,  803,  803,  812,  824,  813,  804,
      821,  817,  827,  822,  811,  823,  823,  829,  804,  804,
      822,  808,  808,  811,  811,  818,  812,  813,  819,  831,
      821,  830,  830,  824,  813,  804,  821,  836,  827,  822,

      811,  823,  823,  829,  832,  838,  822,  839,  843,    0,
        0,    0,    0,    0,    0,  831,  821,  830,  830,    0,
        0,    0,    0,  836,  832,  838,    0,    0,    0,    0,
      832,  838,    0,  839,  843,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      832,  838,  855,  855,  855,  855,  856,  856,  856,  856,
      857,  857,  857,  857,  858,    0,  858,  858,  859,  859,
      859,  859,  860,    0,  860,  860,  861,  861,  863,  863,
      864,  864,  865,  865,  866,  866,  867,  867,  868,  868,
      869,  869,  870,    0,  870,  870,  871,  871,  872,  872,

      873,  873,  874,  874,  875,  875,  876,  876,  877,  877,
      878,  878,  879,  879,  880,  880,  881,  881,  882,  882,
      883,  883,  884,  884,  885,  885,  886,  886,  887,  887,
      888,  888,  890,  890,  891,  891,  893,  893,  894,  894,
      897,  897,  898,  898,  900,    0,  900,  900,  901,    0,
      901,  901,  902,  902,  905,    0,  905,  905,  906,    0,
      906,  906,  907,  907,  908,  908,  909,  909,  911,  911,
      912,  912,  913,  913,  915,  915,  916,  916,  917,  917,
      919,  919,  920,  920,  921,  921,  923,  923,  854,  854,
      854,  854,  854,  854,  854,  854,  854,  854,  854,  854,

      854,  854,  854,  854,  854,  854,  854,  854,  854,  854,
      854,  854,  854,  854,  854,  854,  854,  854,  854,  854,
      854,  854,  854,  854,  854,  854,  854,  854,  854,  854,
      854,  854,  854,  854,  854,  854,  854,  854,  854,  854,
      854,  854,  854,  854,  854,  854,  854,  854,  854,  854,
      854,  854,  854,  854,  854,  854,  854,  854,  854,  854,
      854,  854,  854,  854
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[105] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
    0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 30 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 1933 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 43 "SrvLexer.l"


#line 2038 "SrvLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 855 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5289 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 45 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "SrvLexer.l"
{ return SrvParser::IFACE_ID_ORDER_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 58 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 60 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 62 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 63 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 65 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 67 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 68 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 70 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 72 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 77 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 78 "SrvLexer.l"
{ return SrvParser::CLIENT_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::DUID_KEYWORD_; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::REMOTE_ID_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::ADDRESS_;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::GUESS_MODE_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 84 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ return SrvParser::ACCEPT_UNKNOWN_FQDN_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 94 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
{ return SrvParser::EXTRA_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 99 "SrvLexer.l"
{ return SrvParser::CACHE_SIZE_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
{ return SrvParser::PDCLASS_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
{ return SrvParser::PD_LENGTH_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 102 "SrvLexer.l"
{ return SrvParser::PD_POOL_;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 103 "SrvLexer.l"
{ return SrvParser::VENDOR_SPEC_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 104 "SrvLexer.l"
{ return SrvParser::ADDR_PARAMS_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 105 "SrvLexer.l"
{ return SrvParser::EXPERIMENTAL_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 106 "SrvLexer.l"
{ return SrvParser::TUNNEL_MODE_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 107 "SrvLexer.l"
{ return SrvParser::INACTIVE_MODE_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 108 "SrvLexer.l"
{ return SrvParser::ACCEPT_LEASEQUERY_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 110 "SrvLexer.l"
{ return SrvParser::AUTH_METHOD_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 111 "SrvLexer.l"
{ return SrvParser::AUTH_LIFETIME_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 112 "SrvLexer.l"
{ return SrvParser::AUTH_KEY_LEN_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 113 "SrvLexer.l"
{ return SrvParser::DIGEST_NONE_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 114 "SrvLexer.l"
{ return SrvParser::DIGEST_PLAIN_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 115 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 116 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 117 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 118 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 119 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 120 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 121 "SrvLexer.l"
{ return SrvParser::CLIENT_CLASS_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 122 "SrvLexer.l"
{ return SrvParser::MATCH_IF_; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 123 "SrvLexer.l"
{ return SrvParser::EQ_; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 124 "SrvLexer.l"
{ return SrvParser::AND_; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 125 "SrvLexer.l"
{ return SrvParser::OR_; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 126 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 127 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_DATA_; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 128 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_EN_; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 129 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_DATA_; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 130 "SrvLexer.l"
{ return SrvParser::ALLOW_; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 131 "SrvLexer.l"
{ return SrvParser::DENY_; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 132 "SrvLexer.l"
{ return SrvParser::SUBSTRING_; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 133 "SrvLexer.l"
{ return SrvParser::CONTAIN_; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 136 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 137 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 138 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 139 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 141 "SrvLexer.l"
;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 143 "SrvLexer.l"
;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 145 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno; 
}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 150 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 151 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 152 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 91:
YY_RULE_SETUP
#line 159 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 168 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 177 "SrvLexer.l"
{ 
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 186 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 195 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 204 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 213 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) { 
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        YYABORT; 
    } else {
        return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 225 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 232 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 253 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd then no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) { 
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             YYABORT; 
        } 
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 285 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd; 
      YYABORT; 
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 295 "SrvLexer.l"
{ 
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%u",&(yylval.ival))) { 
        Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd; 
        YYABORT; 
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 304 "SrvLexer.l"
{ return yytext[0]; } 
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 307 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 2786 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 855 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 855 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 854);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 307 "SrvLexer.l"




